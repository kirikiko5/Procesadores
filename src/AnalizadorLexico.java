/* The following code was generated by JFlex 1.4.3 on 6/11/18 11:15 PM */


import java_cup.runtime.*;
import java.io.IOException;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/11/18 11:15 PM from the specification file
 * <tt>/Users/enrique/Documents/EclipseWorkspace/Procesadores/AnalizadorLexico.lex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\76\2\0\1\14\22\0\1\14\1\0\1\75\1\0"+
    "\1\10\3\0\1\12\1\13\1\66\1\1\1\4\1\6\1\3\1\67"+
    "\12\2\1\0\1\71\1\73\1\72\1\74\2\0\1\20\1\47\1\63"+
    "\1\16\1\5\1\25\1\41\1\61\1\27\2\11\1\53\1\31\1\33"+
    "\1\35\1\51\1\65\1\37\1\43\1\22\1\45\2\11\1\55\1\11"+
    "\1\57\3\0\1\70\2\0\1\17\1\46\1\62\1\15\1\23\1\24"+
    "\1\40\1\60\1\26\2\7\1\52\1\30\1\32\1\34\1\50\1\64"+
    "\1\36\1\42\1\21\1\44\2\7\1\54\1\7\1\56\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\1\1\4\1\5\1\6\1\2"+
    "\1\5\1\7\1\10\1\11\1\2\1\5\1\2\1\5"+
    "\1\2\1\5\2\2\1\5\1\2\1\5\1\2\1\5"+
    "\1\2\1\5\1\2\1\5\1\2\1\5\1\2\1\5"+
    "\1\2\1\5\1\2\1\5\1\2\1\5\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\2\3\1\1\21"+
    "\11\0\1\22\1\0\1\23\1\0\1\24\2\0\1\25"+
    "\3\0\1\26\10\0\1\27\1\30\1\31\1\0\1\32"+
    "\2\0\1\33\1\34\1\35\1\0\1\36\1\37\1\40"+
    "\1\41\1\0\1\42\1\43\4\0\1\44\2\0\1\45"+
    "\4\0\1\46\1\47\1\50\1\0\1\51\1\52\1\53"+
    "\1\0\1\54\1\55\1\56\1\0\1\57\1\60\3\0"+
    "\1\61\1\0\1\62\1\63\1\0\1\64\3\0\1\65"+
    "\1\66\1\67\2\0\1\70\2\0\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\176\0\275\0\374\0\u013b\0\176"+
    "\0\u017a\0\u01b9\0\77\0\77\0\u01f8\0\u0237\0\u0276\0\u02b5"+
    "\0\u02f4\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad"+
    "\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5"+
    "\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d"+
    "\0\77\0\77\0\77\0\77\0\77\0\u08dc\0\u091b\0\u095a"+
    "\0\374\0\u0999\0\77\0\77\0\u09d8\0\u0a17\0\u0a56\0\u0a95"+
    "\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\77\0\u0c0f\0\77"+
    "\0\u0c4e\0\77\0\u0c8d\0\u0ccc\0\77\0\u0d0b\0\u0d4a\0\u0d89"+
    "\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81"+
    "\0\u0fc0\0\77\0\77\0\77\0\u095a\0\u095a\0\u0fff\0\u103e"+
    "\0\77\0\77\0\77\0\u107d\0\77\0\77\0\77\0\77"+
    "\0\u10bc\0\77\0\77\0\u10fb\0\u113a\0\u1179\0\u11b8\0\77"+
    "\0\u11f7\0\u1236\0\77\0\u1275\0\u12b4\0\u12f3\0\u1332\0\77"+
    "\0\77\0\77\0\u1371\0\77\0\77\0\77\0\u13b0\0\77"+
    "\0\77\0\77\0\u13ef\0\77\0\77\0\u142e\0\u146d\0\u14ac"+
    "\0\77\0\u14eb\0\77\0\77\0\u152a\0\77\0\u1569\0\u15a8"+
    "\0\u15e7\0\77\0\77\0\77\0\u1626\0\u1665\0\77\0\u16a4"+
    "\0\u16e3\0\77";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\11\1\12\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\11\1\12\1\11\1\12"+
    "\1\43\1\44\1\45\1\46\1\11\1\12\1\11\1\12"+
    "\1\11\1\12\1\47\1\50\1\11\1\12\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\15\101\0"+
    "\1\4\1\5\1\61\1\62\1\63\72\0\1\61\1\0"+
    "\1\61\1\62\1\63\72\0\1\61\2\0\1\62\1\63"+
    "\76\0\1\63\1\0\1\64\1\0\1\65\17\0\2\66"+
    "\20\0\2\67\31\0\1\64\76\0\1\64\1\0\1\65"+
    "\100\0\1\15\61\0\1\15\5\0\1\70\2\0\1\64"+
    "\6\0\2\71\2\0\1\70\2\0\2\72\54\0\1\70"+
    "\2\0\1\64\1\0\1\65\4\0\2\71\2\0\1\70"+
    "\2\0\2\72\57\0\1\64\10\0\2\73\23\0\2\74"+
    "\37\0\1\64\1\0\1\65\6\0\2\73\23\0\2\74"+
    "\37\0\1\64\6\0\2\75\13\0\2\76\22\0\2\77"+
    "\25\0\1\64\1\0\1\65\4\0\2\75\13\0\2\76"+
    "\22\0\2\77\25\0\1\64\21\0\2\66\20\0\2\67"+
    "\31\0\1\64\21\0\2\100\2\101\51\0\1\64\1\0"+
    "\1\65\17\0\2\100\2\101\51\0\1\64\13\0\2\102"+
    "\4\0\2\103\53\0\1\64\1\0\1\65\11\0\2\102"+
    "\4\0\2\103\50\0\1\104\2\0\1\64\12\0\1\104"+
    "\60\0\1\104\2\0\1\64\1\0\1\65\10\0\1\104"+
    "\63\0\1\64\21\0\2\105\53\0\1\64\1\0\1\65"+
    "\17\0\2\105\50\0\1\106\2\0\1\64\6\0\2\107"+
    "\2\0\1\106\6\0\2\110\50\0\1\106\2\0\1\64"+
    "\1\0\1\65\4\0\2\107\2\0\1\106\6\0\2\110"+
    "\53\0\1\64\23\0\2\111\51\0\1\64\1\0\1\65"+
    "\21\0\2\111\51\0\1\64\10\0\2\112\3\0\2\113"+
    "\10\0\2\114\22\0\2\115\21\0\1\64\1\0\1\65"+
    "\6\0\2\112\3\0\2\113\10\0\2\114\22\0\2\115"+
    "\21\0\1\64\25\0\2\116\47\0\1\64\1\0\1\65"+
    "\23\0\2\116\44\0\1\117\2\0\1\64\12\0\1\117"+
    "\10\0\2\120\46\0\1\117\2\0\1\64\1\0\1\65"+
    "\10\0\1\117\10\0\2\120\51\0\1\64\23\0\2\121"+
    "\51\0\1\64\1\0\1\65\21\0\2\121\133\0\1\122"+
    "\1\0\1\123\74\0\1\124\4\0\75\125\1\126\7\0"+
    "\1\63\72\0\1\127\1\0\1\130\107\0\2\131\130\0"+
    "\2\132\51\0\2\133\72\0\2\134\104\0\2\135\77\0"+
    "\2\136\105\0\2\137\65\0\2\140\50\0\1\141\15\0"+
    "\1\141\111\0\2\142\60\0\2\143\25\0\2\144\101\0"+
    "\2\145\40\0\2\146\2\147\5\0\2\150\10\0\2\151"+
    "\65\0\2\152\60\0\2\153\101\0\2\154\17\0\2\155"+
    "\40\0\1\156\15\0\1\156\10\0\2\157\73\0\2\160"+
    "\75\0\2\161\101\0\2\162\65\0\2\163\70\0\2\164"+
    "\114\0\2\165\77\0\2\166\35\0\1\167\1\0\1\130"+
    "\6\0\1\170\65\0\1\167\113\0\2\171\110\0\2\172"+
    "\107\0\2\173\52\0\2\174\71\0\2\175\124\0\2\176"+
    "\52\0\2\177\71\0\2\200\114\0\2\201\105\0\2\202"+
    "\101\0\2\203\75\0\2\204\57\0\2\205\56\0\1\170"+
    "\104\0\2\206\112\0\2\207\73\0\2\210\75\0\2\211"+
    "\107\0\2\212\50\0\2\213\106\0\2\214\101\0\2\215"+
    "\67\0\2\216\52\0\1\217\15\0\1\217\101\0\2\220"+
    "\125\0\2\221\24\0\1\222\15\0\1\222\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5922];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\10\1\2\11\34\1\5\11\5\1\2\11"+
    "\11\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11"+
    "\3\0\1\1\10\0\3\11\1\0\1\1\2\0\3\11"+
    "\1\0\4\11\1\0\2\11\4\0\1\11\2\0\1\11"+
    "\4\0\3\11\1\0\3\11\1\0\3\11\1\0\2\11"+
    "\3\0\1\11\1\0\2\11\1\0\1\11\3\0\3\11"+
    "\2\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	//se define un arrayList para almacenar los tokens:
	ArrayList<String> tokenList = new ArrayList<String>();
	//tambien un entero para llevar la cuenta de los errores:
	int errorLex = 0;
	
	//Metodos que vienen por defecto:

	private void error() throws IOException
	{
		throw new IOException("illegal text at line = "+yyline+", column = "+yycolumn+", text = '"+yytext()+"'");
	}
	
	//metodo para la emision de mensajes de error:
	
	public void error(int linea, int columna, String token){
		System.out.print("Hay un error lexico en la linea "+ (linea+1) +" columna "+ (columna+1));
		System.out.println("\t No es correcta la expresion: "+ token);
		errorLex++;
	}
	
	//devuelve el numero de errores de la parte lexica:
	
	public int getErrorLex (){
		return errorLex;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
     yyline = 1; 
   yycolumn = 1; 
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AnalizadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 42: 
          { return new Symbol (AnalizadorSintacticoSym.TK_LOG,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 58: break;
        case 47: 
          { return new Symbol (AnalizadorSintacticoSym.TK_NEXT,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 59: break;
        case 16: 
          { return new Symbol (AnalizadorSintacticoSym.TK_MAYOR, yyline +1 , yycolumn + 1, yytext());
          }
        case 60: break;
        case 52: 
          { return new Symbol (AnalizadorSintacticoSym.TK_INPUT,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 61: break;
        case 14: 
          { return new Symbol (AnalizadorSintacticoSym.TK_IGUAL, yyline +1 , yycolumn + 1, yytext());
          }
        case 62: break;
        case 25: 
          { return new Symbol (AnalizadorSintacticoSym.TK_MAYOR_IGUAL, yyline +1 , yycolumn + 1, yytext());
          }
        case 63: break;
        case 23: 
          { return new Symbol (AnalizadorSintacticoSym.TK_MENOR_IGUAL, yyline +1 , yycolumn + 1, yytext());
          }
        case 64: break;
        case 39: 
          { return new Symbol (AnalizadorSintacticoSym.TK_SGN,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 65: break;
        case 38: 
          { return new Symbol (AnalizadorSintacticoSym.TK_SIN,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 66: break;
        case 20: 
          { return new Symbol (AnalizadorSintacticoSym.TK_IF,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 67: break;
        case 18: 
          { return new Symbol (AnalizadorSintacticoSym.TK_TO,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 68: break;
        case 53: 
          { return new Symbol (AnalizadorSintacticoSym.TK_GOSUB,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 69: break;
        case 19: 
          { return new Symbol (AnalizadorSintacticoSym.TK_FN,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 70: break;
        case 10: 
          { return new Symbol (AnalizadorSintacticoSym.TK_MUL, yyline +1 , yycolumn + 1, yytext());
          }
        case 71: break;
        case 34: 
          { return new Symbol (AnalizadorSintacticoSym.TK_FOR,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 72: break;
        case 49: 
          { return new Symbol (AnalizadorSintacticoSym.TK_GOTO,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 73: break;
        case 57: 
          { return new Symbol (AnalizadorSintacticoSym.TK_RANDOMIZE,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 74: break;
        case 11: 
          { return new Symbol (AnalizadorSintacticoSym.TK_DIV, yyline +1 , yycolumn + 1, yytext());
          }
        case 75: break;
        case 2: 
          { System.out.print(yytext());
          }
        case 76: break;
        case 9: 
          { /*prescindir de blancos, tabuladores, nueva linea, etc */
          }
        case 77: break;
        case 5: 
          { return new Symbol (AnalizadorSintacticoSym.TK_INT_SIM,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 78: break;
        case 7: 
          { return new Symbol (AnalizadorSintacticoSym.TK_PAR_IZQ, yyline +1 , yycolumn + 1, yytext());
          }
        case 79: break;
        case 12: 
          { return new Symbol (AnalizadorSintacticoSym.TK_EL, yyline +1 , yycolumn + 1, yytext());
          }
        case 80: break;
        case 44: 
          { return new Symbol (AnalizadorSintacticoSym.TK_INT_SUS,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 81: break;
        case 50: 
          { return new Symbol (AnalizadorSintacticoSym.TK_STEP,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 82: break;
        case 48: 
          { return new Symbol (AnalizadorSintacticoSym.TK_READ,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 83: break;
        case 26: 
          { return new Symbol (AnalizadorSintacticoSym.TK_CADENA,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 84: break;
        case 28: 
          { return new Symbol (AnalizadorSintacticoSym.TK_EXP,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 85: break;
        case 27: 
          { return new Symbol (AnalizadorSintacticoSym.TK_END,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 86: break;
        case 6: 
          { return new Symbol (AnalizadorSintacticoSym.TK_RESTA, yyline +1 , yycolumn + 1, yytext());
          }
        case 87: break;
        case 51: 
          { return new Symbol (AnalizadorSintacticoSym.TK_STOP,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 88: break;
        case 40: 
          { return new Symbol (AnalizadorSintacticoSym.TK_SQR,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 89: break;
        case 36: 
          { return new Symbol (AnalizadorSintacticoSym.TK_REM,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 90: break;
        case 54: 
          { return new Symbol (AnalizadorSintacticoSym.TK_PRINT,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 91: break;
        case 3: 
          { return new Symbol (AnalizadorSintacticoSym.TK_SUMA, yyline +1 , yycolumn + 1, yytext());
          }
        case 92: break;
        case 41: 
          { return new Symbol (AnalizadorSintacticoSym.TK_LET,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 93: break;
        case 30: 
          { return new Symbol (AnalizadorSintacticoSym.TK_DIM,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 94: break;
        case 24: 
          { return new Symbol (AnalizadorSintacticoSym.TK_DISTINTO, yyline +1 , yycolumn + 1, yytext());
          }
        case 95: break;
        case 17: 
          { return new Symbol (AnalizadorSintacticoSym.TK_ID,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 96: break;
        case 32: 
          { return new Symbol (AnalizadorSintacticoSym.TK_ABS,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 97: break;
        case 8: 
          { return new Symbol (AnalizadorSintacticoSym.TK_PAR_DER, yyline +1 , yycolumn + 1, yytext());
          }
        case 98: break;
        case 1: 
          { return new Symbol (AnalizadorSintacticoSym.TK_DIG,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 99: break;
        case 22: 
          { return new Symbol (AnalizadorSintacticoSym.TK_GO,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 100: break;
        case 31: 
          { return new Symbol (AnalizadorSintacticoSym.TK_ATN,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 101: break;
        case 37: 
          { return new Symbol (AnalizadorSintacticoSym.TK_RND,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 102: break;
        case 46: 
          { return new Symbol (AnalizadorSintacticoSym.TK_THEN,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 103: break;
        case 15: 
          { return new Symbol (AnalizadorSintacticoSym.TK_MENOR, yyline +1 , yycolumn + 1, yytext());
          }
        case 104: break;
        case 43: 
          { return new Symbol (AnalizadorSintacticoSym.TK_COS,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 105: break;
        case 29: 
          { return new Symbol (AnalizadorSintacticoSym.TK_DEF,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 106: break;
        case 45: 
          { return new Symbol (AnalizadorSintacticoSym.TK_DATA,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 107: break;
        case 35: 
          { return new Symbol (AnalizadorSintacticoSym.TK_INT,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 108: break;
        case 21: 
          { return new Symbol (AnalizadorSintacticoSym.TK_ON,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 109: break;
        case 33: 
          { return new Symbol (AnalizadorSintacticoSym.TK_TAN,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 110: break;
        case 13: 
          { return new Symbol (AnalizadorSintacticoSym.TK_PUNTOCOMA, yyline +1 , yycolumn + 1, yytext());
          }
        case 111: break;
        case 4: 
          { return new Symbol (AnalizadorSintacticoSym.TK_COMA, yyline +1 , yycolumn + 1, yytext());
          }
        case 112: break;
        case 55: 
          { return new Symbol (AnalizadorSintacticoSym.TK_RETURN,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 113: break;
        case 56: 
          { return new Symbol (AnalizadorSintacticoSym.TK_RESTORE,  yyline +1 , yycolumn + 1 , yytext() );
          }
        case 114: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {  return new Symbol(AnalizadorSintacticoSym.EOF); 
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        AnalizadorLexico scanner = null;
        try {
          scanner = new AnalizadorLexico( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
