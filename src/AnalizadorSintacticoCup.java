
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 12 19:28:05 CEST 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import javax.swing.JFileChooser;
import java.util.*;
import java.util.Scanner;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 12 19:28:05 CEST 2018
  */
public class AnalizadorSintacticoCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoCup() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\045\004\000\002\002\004\000\002\046" +
    "\003\000\002\046\004\000\002\050\004\000\002\050\003" +
    "\000\002\051\004\000\002\051\004\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\017\010\000" +
    "\002\017\010\000\002\017\010\000\002\017\010\000\002" +
    "\017\010\000\002\017\010\000\002\017\010\000\002\017" +
    "\010\000\002\017\010\000\002\017\010\000\002\017\010" +
    "\000\002\017\010\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\040\003\000\002\040\003\000\002" +
    "\016\012\000\002\016\012\000\002\016\014\000\002\016" +
    "\014\000\002\043\005\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\024\004\000" +
    "\002\032\003\000\002\022\004\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\020\006\000\002\020\004" +
    "\000\002\020\004\000\002\021\006\000\002\021\005\000" +
    "\002\025\004\000\002\026\003\000\002\026\003\000\002" +
    "\026\005\000\002\026\005\000\002\044\004\000\002\027" +
    "\012\000\002\027\007\000\002\027\012\000\002\030\006" +
    "\000\002\031\003\000\002\034\003\000\002\033\003\000" +
    "\002\042\005\000\002\042\005\000\002\042\005\000\002" +
    "\042\005\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\005" +
    "\000\002\042\005\000\002\042\005\000\002\042\005\000" +
    "\002\002\006\000\002\014\006\000\002\013\006\000\002" +
    "\013\006\000\002\013\004\000\002\007\006\000\002\007" +
    "\006\000\002\007\004\000\002\012\006\000\002\011\006" +
    "\000\002\010\006\000\002\006\006\000\002\005\006\000" +
    "\002\004\006\000\002\003\006\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\006\003\005\070\006\001\002\000\004\002" +
    "\u0100\001\002\000\010\003\ufffc\025\ufffc\070\ufffc\001\002" +
    "\000\066\004\026\005\061\006\035\010\021\011\071\012" +
    "\063\013\057\014\031\015\101\016\054\020\025\021\066" +
    "\022\044\023\056\024\070\032\075\033\020\034\042\035" +
    "\033\036\015\037\045\040\023\041\030\042\047\043\077" +
    "\044\017\001\002\000\010\003\uffff\025\uffff\070\uffff\001" +
    "\002\000\006\003\005\070\011\001\002\000\072\004\026" +
    "\005\061\006\035\007\060\010\021\011\071\012\063\013" +
    "\057\014\031\015\101\016\054\020\025\021\066\022\044" +
    "\023\056\024\070\027\052\032\075\033\020\034\042\035" +
    "\033\036\015\037\045\040\023\041\030\042\047\043\077" +
    "\044\017\001\002\000\010\003\ufffe\025\ufffe\070\ufffe\001" +
    "\002\000\004\002\001\001\002\000\010\003\uffe6\025\uffe6" +
    "\070\uffe6\001\002\000\004\051\375\001\002\000\010\003" +
    "\uffea\025\uffea\070\uffea\001\002\000\004\051\372\001\002" +
    "\000\004\051\367\001\002\000\004\046\342\001\002\000" +
    "\010\003\ufff0\025\ufff0\070\ufff0\001\002\000\004\051\337" +
    "\001\002\000\010\003\ufff3\025\ufff3\070\ufff3\001\002\000" +
    "\010\003\uffac\025\uffac\070\uffac\001\002\000\010\045\214" +
    "\046\211\047\212\001\002\000\010\003\uffe0\025\uffe0\070" +
    "\uffe0\001\002\000\004\051\333\001\002\000\014\045\270" +
    "\046\262\047\267\070\265\071\266\001\002\000\010\003" +
    "\ufff6\025\ufff6\070\ufff6\001\002\000\004\051\257\001\002" +
    "\000\010\003\uffec\025\uffec\070\uffec\001\002\000\006\046" +
    "\251\047\252\001\002\000\010\003\uffe3\025\uffe3\070\uffe3" +
    "\001\002\000\010\003\uffe5\025\uffe5\070\uffe5\001\002\000" +
    "\010\003\uffe7\025\uffe7\070\uffe7\001\002\000\010\003\uffe9" +
    "\025\uffe9\070\uffe9\001\002\000\004\051\246\001\002\000" +
    "\010\003\uffe2\025\uffe2\070\uffe2\001\002\000\010\003\uffad" +
    "\025\uffad\070\uffad\001\002\000\006\047\241\051\240\001" +
    "\002\000\010\003\ufff9\025\ufff9\070\ufff9\001\002\000\004" +
    "\051\235\001\002\000\010\003\ufff7\025\ufff7\070\ufff7\001" +
    "\002\000\010\003\uffe1\025\uffe1\070\uffe1\001\002\000\004" +
    "\002\ufffa\001\002\000\010\003\ufffd\025\ufffd\070\ufffd\001" +
    "\002\000\010\045\225\046\223\047\224\001\002\000\010" +
    "\003\uffed\025\uffed\070\uffed\001\002\000\010\045\214\046" +
    "\211\047\212\001\002\000\004\070\210\001\002\000\004" +
    "\002\ufffb\001\002\000\004\050\135\001\002\000\010\003" +
    "\ufff2\025\ufff2\070\ufff2\001\002\000\012\045\127\046\122" +
    "\047\126\070\124\001\002\000\010\003\ufff8\025\ufff8\070" +
    "\ufff8\001\002\000\010\003\uffef\025\uffef\070\uffef\001\002" +
    "\000\014\045\127\046\122\047\126\070\124\071\125\001" +
    "\002\000\010\003\uffee\025\uffee\070\uffee\001\002\000\010" +
    "\003\uffc4\025\uffc4\070\uffc4\001\002\000\010\003\uffab\025" +
    "\uffab\070\uffab\001\002\000\010\003\uffe4\025\uffe4\070\uffe4" +
    "\001\002\000\010\003\ufff4\025\ufff4\070\ufff4\001\002\000" +
    "\010\003\uffeb\025\uffeb\070\uffeb\001\002\000\004\051\114" +
    "\001\002\000\010\003\ufff5\025\ufff5\070\ufff5\001\002\000" +
    "\006\047\107\051\106\001\002\000\010\003\uffe8\025\uffe8" +
    "\070\uffe8\001\002\000\004\071\103\001\002\000\010\003" +
    "\ufff1\025\ufff1\070\ufff1\001\002\000\004\061\104\001\002" +
    "\000\012\003\uffb8\025\uffb8\045\105\070\uffb8\001\002\000" +
    "\010\003\uffb9\025\uffb9\070\uffb9\001\002\000\006\046\110" +
    "\070\111\001\002\000\010\003\uff99\025\uff99\070\uff99\001" +
    "\002\000\004\052\113\001\002\000\004\052\112\001\002" +
    "\000\010\003\uff9b\025\uff9b\070\uff9b\001\002\000\010\003" +
    "\uff9a\025\uff9a\070\uff9a\001\002\000\010\046\115\047\120" +
    "\070\117\001\002\000\012\003\uffd2\025\uffd2\052\uffd2\070" +
    "\uffd2\001\002\000\004\052\121\001\002\000\012\003\uffd3" +
    "\025\uffd3\052\uffd3\070\uffd3\001\002\000\012\003\uffd1\025" +
    "\uffd1\052\uffd1\070\uffd1\001\002\000\010\003\uff9d\025\uff9d" +
    "\070\uff9d\001\002\000\010\003\uff82\025\uff82\070\uff82\001" +
    "\002\000\010\003\uffba\025\uffba\070\uffba\001\002\000\010" +
    "\003\uff80\025\uff80\070\uff80\001\002\000\012\003\uffbb\025" +
    "\uffbb\061\130\070\uffbb\001\002\000\010\003\uff81\025\uff81" +
    "\070\uff81\001\002\000\010\003\uff83\025\uff83\070\uff83\001" +
    "\002\000\004\045\131\001\002\000\010\003\uffbc\025\uffbc" +
    "\070\uffbc\001\002\000\006\003\005\070\006\001\002\000" +
    "\010\003\005\025\134\070\006\001\002\000\010\003\uffae" +
    "\025\uffae\070\uffae\001\002\000\004\046\136\001\002\000" +
    "\006\051\137\053\140\001\002\000\004\046\177\001\002" +
    "\000\014\045\145\046\141\047\143\070\142\071\144\001" +
    "\002\000\014\063\151\064\154\065\150\066\152\067\153" +
    "\001\002\000\014\063\151\064\154\065\150\066\152\067" +
    "\153\001\002\000\014\063\151\064\154\065\150\066\152" +
    "\067\153\001\002\000\014\063\151\064\154\065\150\066" +
    "\152\067\153\001\002\000\014\063\151\064\154\065\150" +
    "\066\152\067\153\001\002\000\022\003\uffb0\025\uffb0\063" +
    "\151\064\154\065\150\066\152\067\153\070\uffb0\001\002" +
    "\000\014\045\161\046\155\047\160\070\156\071\157\001" +
    "\002\000\014\045\uff86\046\uff86\047\uff86\070\uff86\071\uff86" +
    "\001\002\000\014\045\uff88\046\uff88\047\uff88\070\uff88\071" +
    "\uff88\001\002\000\014\045\uff85\046\uff85\047\uff85\070\uff85" +
    "\071\uff85\001\002\000\014\045\uff84\046\uff84\047\uff84\070" +
    "\uff84\071\uff84\001\002\000\014\045\uff87\046\uff87\047\uff87" +
    "\070\uff87\071\uff87\001\002\000\040\003\uffa1\025\uffa1\030" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1" +
    "\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\001" +
    "\002\000\040\003\uffa2\025\uffa2\030\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\057\uffa2\060\uffa2\063\uffa2\064\uffa2\065" +
    "\uffa2\066\uffa2\067\uffa2\070\uffa2\001\002\000\040\003\uff9e" +
    "\025\uff9e\030\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057" +
    "\uff9e\060\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e" +
    "\070\uff9e\001\002\000\040\003\uffa0\025\uffa0\030\uffa0\053" +
    "\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\063\uffa0" +
    "\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\001\002\000" +
    "\040\003\uff9f\025\uff9f\030\uff9f\053\uff9f\054\uff9f\055\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\063\uff9f\064\uff9f\065\uff9f\066" +
    "\uff9f\067\uff9f\070\uff9f\001\002\000\004\071\163\001\002" +
    "\000\040\003\uffa4\025\uffa4\030\uffa4\053\uffa4\054\uffa4\055" +
    "\uffa4\056\uffa4\057\uffa4\060\uffa4\063\uffa4\064\uffa4\065\uffa4" +
    "\066\uffa4\067\uffa4\070\uffa4\001\002\000\004\045\165\001" +
    "\002\000\040\003\uffa3\025\uffa3\030\uffa3\053\uffa3\054\uffa3" +
    "\055\uffa3\056\uffa3\057\uffa3\060\uffa3\063\uffa3\064\uffa3\065" +
    "\uffa3\066\uffa3\067\uffa3\070\uffa3\001\002\000\006\046\167" +
    "\070\170\001\002\000\040\003\uffa5\025\uffa5\030\uffa5\053" +
    "\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\063\uffa5" +
    "\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\001\002\000" +
    "\040\003\uffa9\025\uffa9\030\uffa9\053\uffa9\054\uffa9\055\uffa9" +
    "\056\uffa9\057\uffa9\060\uffa9\063\uffa9\064\uffa9\065\uffa9\066" +
    "\uffa9\067\uffa9\070\uffa9\001\002\000\006\046\172\047\173" +
    "\001\002\000\040\003\uffa8\025\uffa8\030\uffa8\053\uffa8\054" +
    "\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\063\uffa8\064\uffa8" +
    "\065\uffa8\066\uffa8\067\uffa8\070\uffa8\001\002\000\040\003" +
    "\uffa7\025\uffa7\030\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7" +
    "\057\uffa7\060\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067" +
    "\uffa7\070\uffa7\001\002\000\006\047\176\070\175\001\002" +
    "\000\040\003\uffaa\025\uffaa\030\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\057\uffaa\060\uffaa\063\uffaa\064\uffaa\065\uffaa" +
    "\066\uffaa\067\uffaa\070\uffaa\001\002\000\040\003\uffa6\025" +
    "\uffa6\030\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6" +
    "\060\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070" +
    "\uffa6\001\002\000\004\052\200\001\002\000\004\053\201" +
    "\001\002\000\014\045\206\046\202\047\205\070\204\071" +
    "\144\001\002\000\022\003\uff82\025\uff82\063\151\064\154" +
    "\065\150\066\152\067\153\070\uff82\001\002\000\010\003" +
    "\uffb1\025\uffb1\070\uffb1\001\002\000\022\003\uff80\025\uff80" +
    "\063\151\064\154\065\150\066\152\067\153\070\uff80\001" +
    "\002\000\022\003\uff81\025\uff81\063\151\064\154\065\150" +
    "\066\152\067\153\070\uff81\001\002\000\022\003\uff83\025" +
    "\uff83\063\151\064\154\065\150\066\152\067\153\070\uff83" +
    "\001\002\000\022\003\uffaf\025\uffaf\063\151\064\154\065" +
    "\150\066\152\067\153\070\uffaf\001\002\000\010\003\uffb2" +
    "\025\uffb2\070\uffb2\001\002\000\012\003\uffc1\025\uffc1\062" +
    "\221\070\uffc1\001\002\000\012\003\uffc0\025\uffc0\062\217" +
    "\070\uffc0\001\002\000\010\003\uffc5\025\uffc5\070\uffc5\001" +
    "\002\000\012\003\uffc2\025\uffc2\062\215\070\uffc2\001\002" +
    "\000\010\045\214\046\211\047\212\001\002\000\010\003" +
    "\uffbf\025\uffbf\070\uffbf\001\002\000\010\045\214\046\211" +
    "\047\212\001\002\000\010\003\uffbd\025\uffbd\070\uffbd\001" +
    "\002\000\010\045\214\046\211\047\212\001\002\000\010" +
    "\003\uffbe\025\uffbe\070\uffbe\001\002\000\004\053\233\001" +
    "\002\000\004\053\231\001\002\000\004\053\226\001\002" +
    "\000\014\045\145\046\141\047\143\070\142\071\227\001" +
    "\002\000\022\003\uffc8\025\uffc8\063\151\064\154\065\150" +
    "\066\152\067\153\070\uffc8\001\002\000\022\003\uffc9\025" +
    "\uffc9\063\151\064\154\065\150\066\152\067\153\070\uffc9" +
    "\001\002\000\010\046\115\047\120\070\117\001\002\000" +
    "\010\003\uffc6\025\uffc6\070\uffc6\001\002\000\010\046\115" +
    "\047\120\070\117\001\002\000\010\003\uffc7\025\uffc7\070" +
    "\uffc7\001\002\000\010\046\115\047\120\070\117\001\002" +
    "\000\004\052\237\001\002\000\010\003\uff95\025\uff95\070" +
    "\uff95\001\002\000\006\046\242\070\243\001\002\000\010" +
    "\003\uff96\025\uff96\070\uff96\001\002\000\004\052\245\001" +
    "\002\000\004\052\244\001\002\000\010\003\uff98\025\uff98" +
    "\070\uff98\001\002\000\010\003\uff97\025\uff97\070\uff97\001" +
    "\002\000\010\046\115\047\120\070\117\001\002\000\004" +
    "\052\250\001\002\000\010\003\uff90\025\uff90\070\uff90\001" +
    "\002\000\012\003\uffb6\025\uffb6\062\uffb6\070\uffb6\001\002" +
    "\000\012\003\uffb5\025\uffb5\062\uffb5\070\uffb5\001\002\000" +
    "\012\003\uffb7\025\uffb7\062\254\070\uffb7\001\002\000\006" +
    "\046\255\047\256\001\002\000\012\003\uffb4\025\uffb4\062" +
    "\uffb4\070\uffb4\001\002\000\012\003\uffb3\025\uffb3\062\uffb3" +
    "\070\uffb3\001\002\000\010\046\115\047\120\070\117\001" +
    "\002\000\004\052\261\001\002\000\010\003\uff91\025\uff91" +
    "\070\uff91\001\002\000\032\030\uffd2\053\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\063\151\064\154\065\150" +
    "\066\152\067\153\001\002\000\016\053\273\054\277\055" +
    "\272\056\276\057\300\060\275\001\002\000\016\053\273" +
    "\054\277\055\272\056\276\057\300\060\275\001\002\000" +
    "\032\030\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3" +
    "\060\uffd3\063\151\064\154\065\150\066\152\067\153\001" +
    "\002\000\032\030\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0" +
    "\057\uffd0\060\uffd0\063\151\064\154\065\150\066\152\067" +
    "\153\001\002\000\032\030\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\063\151\064\154\065\150\066" +
    "\152\067\153\001\002\000\032\030\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\063\151\064\154\065" +
    "\150\066\152\067\153\001\002\000\030\053\273\054\277" +
    "\055\272\056\276\057\300\060\275\063\151\064\154\065" +
    "\150\066\152\067\153\001\002\000\014\045\uff8d\046\uff8d" +
    "\047\uff8d\070\uff8d\071\uff8d\001\002\000\014\045\uff89\046" +
    "\uff89\047\uff89\070\uff89\071\uff89\001\002\000\014\045\145" +
    "\046\262\047\267\070\265\071\144\001\002\000\014\045" +
    "\uff8a\046\uff8a\047\uff8a\070\uff8a\071\uff8a\001\002\000\014" +
    "\045\uff8b\046\uff8b\047\uff8b\070\uff8b\071\uff8b\001\002\000" +
    "\014\045\uff8e\046\uff8e\047\uff8e\070\uff8e\071\uff8e\001\002" +
    "\000\014\045\uff8c\046\uff8c\047\uff8c\070\uff8c\071\uff8c\001" +
    "\002\000\004\030\306\001\002\000\016\030\303\063\151" +
    "\064\154\065\150\066\152\067\153\001\002\000\012\013" +
    "\057\046\115\047\120\070\117\001\002\000\010\003\uffd5" +
    "\025\uffd5\070\uffd5\001\002\000\010\003\uffd4\025\uffd4\070" +
    "\uffd4\001\002\000\012\013\057\046\115\047\120\070\117" +
    "\001\002\000\010\003\uffd7\025\uffd7\070\uffd7\001\002\000" +
    "\010\003\uffd6\025\uffd6\070\uffd6\001\002\000\014\045\145" +
    "\046\262\047\267\070\265\071\144\001\002\000\004\030" +
    "\317\001\002\000\016\030\314\063\151\064\154\065\150" +
    "\066\152\067\153\001\002\000\012\013\057\046\115\047" +
    "\120\070\117\001\002\000\010\003\uffd9\025\uffd9\070\uffd9" +
    "\001\002\000\010\003\uffd8\025\uffd8\070\uffd8\001\002\000" +
    "\012\013\057\046\115\047\120\070\117\001\002\000\010" +
    "\003\uffdb\025\uffdb\070\uffdb\001\002\000\010\003\uffda\025" +
    "\uffda\070\uffda\001\002\000\014\045\270\046\141\047\143" +
    "\070\142\071\266\001\002\000\004\030\330\001\002\000" +
    "\016\030\325\063\151\064\154\065\150\066\152\067\153" +
    "\001\002\000\012\013\057\046\115\047\120\070\117\001" +
    "\002\000\010\003\uffdd\025\uffdd\070\uffdd\001\002\000\010" +
    "\003\uffdc\025\uffdc\070\uffdc\001\002\000\012\013\057\046" +
    "\115\047\120\070\117\001\002\000\010\003\uffdf\025\uffdf" +
    "\070\uffdf\001\002\000\010\003\uffde\025\uffde\070\uffde\001" +
    "\002\000\010\046\115\047\120\070\117\001\002\000\004" +
    "\052\335\001\002\000\010\003\uff94\025\uff94\070\uff94\001" +
    "\002\000\010\003\uffc3\025\uffc3\070\uffc3\001\002\000\010" +
    "\046\115\047\120\070\117\001\002\000\004\052\341\001" +
    "\002\000\010\003\uff93\025\uff93\070\uff93\001\002\000\004" +
    "\053\343\001\002\000\004\070\344\001\002\000\004\031" +
    "\345\001\002\000\006\046\346\070\347\001\002\000\010" +
    "\003\005\026\361\070\006\001\002\000\010\003\005\026" +
    "\350\070\006\001\002\000\004\070\356\001\002\000\006" +
    "\003\005\070\353\001\002\000\010\003\uffcd\025\uffcd\070" +
    "\uffcd\001\002\000\070\004\026\005\061\006\035\010\021" +
    "\011\071\012\063\013\057\014\031\015\101\016\054\017" +
    "\354\020\025\021\066\022\044\023\056\024\070\032\075" +
    "\033\020\034\042\035\033\036\015\037\045\040\023\041" +
    "\030\042\047\043\077\044\017\001\002\000\004\046\355" +
    "\001\002\000\010\003\uffca\025\uffca\070\uffca\001\002\000" +
    "\006\003\005\070\006\001\002\000\006\003\005\070\353" +
    "\001\002\000\010\003\uffcb\025\uffcb\070\uffcb\001\002\000" +
    "\004\070\364\001\002\000\006\003\005\070\353\001\002" +
    "\000\010\003\uffce\025\uffce\070\uffce\001\002\000\006\003" +
    "\005\070\006\001\002\000\006\003\005\070\353\001\002" +
    "\000\010\003\uffcc\025\uffcc\070\uffcc\001\002\000\010\046" +
    "\115\047\120\070\117\001\002\000\004\052\371\001\002" +
    "\000\010\003\uff8f\025\uff8f\070\uff8f\001\002\000\010\046" +
    "\115\047\120\070\117\001\002\000\004\052\374\001\002" +
    "\000\010\003\uff9c\025\uff9c\070\uff9c\001\002\000\010\046" +
    "\115\047\120\070\117\001\002\000\004\052\377\001\002" +
    "\000\010\003\uff92\025\uff92\070\uff92\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\010\045\003\046\007\050\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\002\045\003\064" +
    "\004\021\005\101\006\061\007\023\010\072\011\075\012" +
    "\031\013\047\014\063\015\033\016\066\017\054\020\073" +
    "\021\015\022\077\024\037\025\013\027\036\030\071\031" +
    "\035\032\042\033\026\034\050\044\040\047\052\001\001" +
    "\000\002\001\001\000\006\050\011\051\012\001\001\000" +
    "\070\002\045\003\064\004\021\005\101\006\061\007\023" +
    "\010\072\011\075\012\031\013\047\014\063\015\033\016" +
    "\066\017\054\020\073\021\015\022\077\024\037\025\013" +
    "\027\036\030\071\031\035\032\042\033\026\034\050\044" +
    "\040\047\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\335\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\037\263\040\262\042\270\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\046\132\050\006\001\001" +
    "\000\004\050\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\145" +
    "\001\001\000\004\036\173\001\001\000\004\036\170\001" +
    "\001\000\004\036\165\001\001\000\004\036\163\001\001" +
    "\000\004\036\161\001\001\000\004\036\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\202\042\206\001\001\000\004\036\173\001\001" +
    "\000\002\001\001\000\004\036\170\001\001\000\004\036" +
    "\165\001\001\000\004\036\161\001\001\000\004\036\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\215" +
    "\001\001\000\002\001\001\000\004\023\217\001\001\000" +
    "\002\001\001\000\004\023\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\227\001\001\000\004\036\163\001\001\000\004" +
    "\036\146\001\001\000\004\037\231\001\001\000\002\001" +
    "\001\000\004\037\233\001\001\000\002\001\001\000\004" +
    "\037\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\246\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\173\001\001\000\004\035\321\001\001\000\004\035\310" +
    "\001\001\000\004\036\170\001\001\000\004\036\163\001" +
    "\001\000\004\036\165\001\001\000\004\036\161\001\001" +
    "\000\006\035\273\036\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\037\300\042\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\146\001\001\000\006" +
    "\037\303\044\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\037\306\044\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\311\042\312\001\001\000" +
    "\002\001\001\000\004\036\146\001\001\000\006\037\314" +
    "\044\315\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\037\317\044\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\322\042\323\001\001\000\002\001" +
    "\001\000\004\036\146\001\001\000\006\037\325\044\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\330\044\331\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\333\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\046\361" +
    "\050\006\001\001\000\006\046\350\050\006\001\001\000" +
    "\002\001\001\000\006\043\351\050\011\001\001\000\002" +
    "\001\001\000\070\002\045\003\064\004\021\005\101\006" +
    "\061\007\023\010\072\011\075\012\031\013\047\014\063" +
    "\015\033\016\066\017\054\020\073\021\015\022\077\024" +
    "\037\025\013\027\036\030\071\031\035\032\042\033\026" +
    "\034\050\044\040\047\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\046\356\050\006\001\001\000\006" +
    "\043\357\050\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\362\050\011\001\001\000\002\001\001" +
    "\000\006\046\364\050\006\001\001\000\006\043\365\050" +
    "\011\001\001\000\002\001\001\000\004\037\367\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\372\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\375" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	int err_sintactico = 0;
	int err_semantico = 0;
	
	
	boolean isRead = false;
	boolean isRnd = false;
	boolean isData = false;
	

	static HashMap<String, Object> tablaSimbolos = new HashMap<String, Object> ();


	ArrayList<Integer> numerosLinea = new ArrayList<Integer>();

	public static void main (String argsv[]) throws Exception {
		
		BufferedReader nombreArchivo = new BufferedReader(new InputStreamReader(System.in));
        String entrada = nombreArchivo.readLine();
        //String entrada = "Prueba1.bas";
        String tipoCorrecto = "bas";
		String tipoArchivo = entrada.substring(entrada.lastIndexOf(".")+1);
        if(!tipoArchivo.equals(tipoCorrecto)){
    		System.err.println("Extension del archivo necesaria '.bas'\n");
    	} else {
	        FileInputStream fileInput = new FileInputStream(entrada);
	  		AnalizadorSintacticoCup parser;
	  		AnalizadorLexico lexico = new AnalizadorLexico(fileInput);
	  		parser = new AnalizadorSintacticoCup(lexico);
	    	parser.parse();
	    	
	    	if(parser.err_sintactico == 0 && parser.err_semantico == 0) {
	    		//if (parser.isSorted()) {
		    		System.out.println("Analisis realizado correctamente");
		    		System.out.println("Lista de Tokens identificados");
		    		//parser.printToken();
		    		lexico.pintarLexemas();
		    		parser.mostrarTabla();
		    	/*} else {
		    		System.out.println("Los numeros de linea estan mal numerados");
		    	}*/
	    	} else { 
	    		System.out.println("Hay errores en el codigo");
	    		System.out.println("Errores sintacticos: " + parser.err_sintactico);
	    		System.out.println("Errores semanticos: " + parser.err_semantico);
	    	}
    	}

   	}

   	public void syntax_error(Symbol s) {
  		System.out.println("Error sintactico en linea "+(s.left)+" y columna "+(s.right+1)+ ": token leido \""+s.value+"\", se esperaba otro token.\n");
  		err_sintactico++;
	}

	public HashMap getTablaSimbolos(){
  		return tablaSimbolos;
  	}

	
	public ArrayList getLinea() {
		return numerosLinea;
	}

	  public void mostrarTabla(){
	  
	  	System.out.println("    TABLA DE SIMBOLOS     ");	
	  	System.out.println("--------------------------------");
		Iterator itert = tablaSimbolos.entrySet().iterator();
		while (itert.hasNext()) {
	    	Map.Entry entry = (Map.Entry)itert.next();
	    	System.out.println(entry.getKey()); 
		}
	  	System.out.println("--------------------------------");
	  	
	  }
	
	
	public boolean isSorted() {
	    boolean sorted = true;
	    int i = 1;
	    int actual;
	    int anterior = numerosLinea.get(0);  

	    while(i < numerosLinea.size()) {
	    	actual = numerosLinea.get(i);
	    	System.out.print(actual + "\n");
	    	if(!(actual > anterior)) {
	    		System.out.print("Aqui");
	    		sorted = false;
	    	}
	    	anterior = actual;
	    	i++;
	    }
	    return sorted;
	}

	public void declarar(Object dat) {
		if(!getTablaSimbolos().containsKey(dat)){
			String tipo = "cadena";
			Ident id = new Ident(dat.toString(), tipo);
			getTablaSimbolos().put(id.getNombre(), id);
		}
	}
	
	public void check(Object dat) {
		if(!getTablaSimbolos().containsKey(dat)){
				System.out.println("Variable " + dat.toString() + " no declarada");
				err_semantico++;
			}
	}

	/*public boolean comprobarTipo(Symbol s1, Symbol s2) {

	}*/


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoCup$actions {


	

  private final AnalizadorSintacticoCup parser;

  /** Constructor */
  CUP$AnalizadorSintacticoCup$actions(AnalizadorSintacticoCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoCup$do_action(
    int                        CUP$AnalizadorSintacticoCup$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoCup$parser,
    java.util.Stack            CUP$AnalizadorSintacticoCup$stack,
    int                        CUP$AnalizadorSintacticoCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoCup$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // dato ::= TK_DIG 
            {
              Object RESULT =null;
		
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("dato",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // dato ::= TK_INT_SUS 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.check(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("dato",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // dato ::= TK_INT_SIM 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.check(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("dato",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // dato ::= TK_ID 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.check(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("dato",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operador ::= TK_EL 
            {
              Object RESULT =null;
		
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("operador",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operador ::= TK_DIV 
            {
              Object RESULT =null;
		
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("operador",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operador ::= TK_MUL 
            {
              Object RESULT =null;
		
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("operador",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operador ::= TK_RESTA 
            {
              Object RESULT =null;
		
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("operador",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operador ::= TK_SUMA 
            {
              Object RESULT =null;
		
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("operador",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // comparacion ::= TK_IGUAL 
            {
              Object RESULT =null;
		
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("comparacion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // comparacion ::= TK_DISTINTO 
            {
              Object RESULT =null;
		
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("comparacion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // comparacion ::= TK_MENOR_IGUAL 
            {
              Object RESULT =null;
		
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("comparacion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // comparacion ::= TK_MAYOR_IGUAL 
            {
              Object RESULT =null;
		
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("comparacion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // comparacion ::= TK_MAYOR 
            {
              Object RESULT =null;
		
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("comparacion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // comparacion ::= TK_MENOR 
            {
              Object RESULT =null;
		
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("comparacion",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // atn ::= TK_ATN TK_PAR_IZQ numerico TK_PAR_DER 
            {
              Object RESULT =null;
		
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("atn",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cos ::= TK_COS TK_PAR_IZQ numerico TK_PAR_DER 
            {
              Object RESULT =null;
		
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("cos",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // exp ::= TK_EXP TK_PAR_IZQ numerico TK_PAR_DER 
            {
              Object RESULT =null;
		
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // int ::= TK_INT TK_PAR_IZQ numerico TK_PAR_DER 
            {
              Object RESULT =null;
		
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("int",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // rnd ::= TK_RND TK_PAR_IZQ numerico TK_PAR_DER 
            {
              Object RESULT =null;
		
		parser.isRnd = true;
   	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("rnd",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sgn ::= TK_SGN TK_PAR_IZQ numerico TK_PAR_DER 
            {
              Object RESULT =null;
		
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("sgn",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sin ::= TK_SIN TK_PAR_IZQ numerico TK_PAR_DER 
            {
              Object RESULT =null;
		
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("sin",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // log ::= TK_LOG TK_INT_SUS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("log",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // log ::= TK_LOG TK_PAR_IZQ TK_INT_SIM TK_PAR_DER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("log",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // log ::= TK_LOG TK_PAR_IZQ TK_DIG TK_PAR_DER 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
			String aux = token.toString();
			if(aux.contains("-")) {
				System.out.println("El valor introducido tiene que ser mayor que 0");
				parser.err_semantico++;
			} else {
				int valor = Integer.parseInt(aux);
				if (valor <= 0) {
					System.out.println("El valor introducido no puede ser 0");
					parser.err_semantico++;
				}
			} 

	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("log",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sqr ::= TK_SQR TK_INT_SUS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("sqr",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sqr ::= TK_SQR TK_PAR_IZQ TK_INT_SIM TK_PAR_DER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("sqr",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sqr ::= TK_SQR TK_PAR_IZQ TK_DIG TK_PAR_DER 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
			String aux = token.toString();
			if(aux.contains("-")) {
				System.out.println("El valor introducido tiene que ser mayor que 0");
				parser.err_semantico++;
			}
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("sqr",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tan ::= TK_TAN TK_PAR_IZQ numerico TK_PAR_DER 
            {
              Object RESULT =null;
		
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("tan",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // abs ::= TK_ABS TK_PAR_IZQ numerico TK_PAR_DER 
            {
              Object RESULT =null;
		
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("abs",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= expresion operador TK_CADENA 
            {
              Object RESULT =null;
		
			
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= expresion operador TK_ID 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
					parser.check(token);
			
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= expresion operador TK_INT_SUS 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
					parser.check(token);
			
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= expresion operador TK_INT_SIM 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
					parser.check(token);
			
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= expresion operador TK_DIG 
            {
              Object RESULT =null;
		
			
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= TK_CADENA operador TK_ID 
            {
              Object RESULT =null;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
					parser.check(token2);
			
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= TK_ID operador TK_CADENA 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
					parser.check(token);

			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= TK_INT_SUS operador TK_INT_SIM 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
					parser.check(token);
					parser.check(token2);

			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= TK_INT_SIM operador TK_INT_SUS 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
					parser.check(token);
					parser.check(token2);
			
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= TK_DIG operador TK_INT_SUS 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
					parser.check(token2);
			
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= TK_DIG operador TK_INT_SIM 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
					parser.check(token2);
			
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= TK_INT_SUS operador TK_DIG 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
					parser.check(token);
			
			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= TK_INT_SIM operador TK_DIG 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
					parser.check(token);

			
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("expresion",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // go ::= TK_GO 
            {
              Object RESULT =null;
		
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("go",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // on ::= TK_ON 
            {
              Object RESULT =null;
		
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("on",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // randomize ::= TK_RANDOMIZE 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			if(!parser.isRnd) {
				System.out.println("No se ha encontrado la instruccion RND");
				System.out.println("Para usar esta funcion se necesita una invocacion previa de la funcion RND");
				parser.err_semantico++;
			} 
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("randomize",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // gosub ::= TK_GOSUB dato bloque TK_RETURN 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("gosub",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // def ::= TK_DEF TK_FN TK_INT_SIM TK_PAR_IZQ TK_INT_SIM TK_PAR_DER TK_IGUAL expresion 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).value;
		int token7left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int token7right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token7 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).left;
		int token5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).right;
		Object token5 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int token6left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int token6right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token6 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
			parser.check(token3);
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("def",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // def ::= TK_DEF TK_FN TK_INT_SIM TK_IGUAL expresion 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
			parser.check(token3);

		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("def",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // def ::= TK_DEF TK_FN TK_INT_SIM TK_PAR_IZQ TK_INT_SIM TK_PAR_DER TK_IGUAL dato 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).value;
		int token7left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int token7right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token7 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).left;
		int token5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).right;
		Object token5 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int token6left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int token6right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token6 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
			parser.check(token3);

		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("def",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // goto ::= TK_GOTO TK_DIG 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("goto",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // c_dim ::= c_dim TK_COMA TK_INT_SUS 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.declarar(token);
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_dim",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // c_dim ::= c_dim TK_COMA TK_INT_SIM 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.declarar(token);
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_dim",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // c_dim ::= TK_INT_SUS 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.declarar(token);
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_dim",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // c_dim ::= TK_INT_SIM 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.declarar(token);
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_dim",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // dim ::= TK_DIM c_dim 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("dim",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // input ::= TK_INPUT TK_CADENA TK_PUNTOCOMA 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("input",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // input ::= TK_INPUT TK_CADENA TK_PUNTOCOMA TK_ID 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		int token4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
				parser.check(token4);
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("input",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // print ::= TK_PRINT dato 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		

		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("print",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // print ::= TK_PRINT TK_CADENA 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		

		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("print",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // print ::= TK_PRINT TK_CADENA TK_PUNTOCOMA TK_ID 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		int token4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
				parser.check(token4);

		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("print",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // c_data ::= TK_INT_SUS TK_COMA c_data 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
			parser.declarar(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_data",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // c_data ::= TK_INT_SIM TK_COMA c_data 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
			parser.declarar(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_data",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // c_data ::= TK_ID TK_COMA c_data 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
			parser.declarar(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_data",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // c_data ::= TK_INT_SUS 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.declarar(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_data",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // c_data ::= TK_INT_SIM 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.declarar(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_data",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // c_data ::= TK_ID 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.declarar(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_data",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // data ::= TK_DATA c_data 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
			parser.isData = true;
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("data",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // restore ::= TK_RESTORE 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			if (!parser.isRead) {
				System.out.println("No se ha encontrado la instruccion READ");
				parser.err_semantico++;
			}
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("restore",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // read ::= TK_READ c_data 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
			if (!parser.isData) {
				System.out.println("Se necesita una declaracion previa de DATA");
				parser.err_semantico++;
			}
			parser.isRead = true;
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("read",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // let ::= TK_LET TK_INT_SUS TK_IGUAL numerico 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
				parser.declarar(dat);
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("let",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // let ::= TK_LET TK_INT_SIM TK_IGUAL numerico 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
				parser.declarar(dat);

		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("let",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // let ::= TK_LET TK_ID TK_IGUAL TK_CADENA 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
				parser.declarar(dat);
				
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("let",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // let ::= TK_LET TK_ID TK_IGUAL expresion 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
				parser.declarar(dat);

		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("let",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // next ::= TK_DIG TK_NEXT TK_INT_SIM 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
		parser.declarar(token3);
		String aux = token.toString();
		int valor = Integer.parseInt(aux);
		parser.getLinea().add(valor);
		
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("next",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // for ::= TK_FOR TK_INT_SIM TK_IGUAL TK_DIG TK_TO TK_DIG TK_STEP TK_DIG bloque next 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-9)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-8)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-8)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-8)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).value;
		int token4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).left;
		int token4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).right;
		Object token4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).value;
		int token5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int token5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token5 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token6left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).left;
		int token6right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).right;
		Object token6 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).value;
		int token7left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int token7right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token7 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int token8left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int token8right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token8 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		
			parser.declarar(token2);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("for",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // for ::= TK_FOR TK_INT_SIM TK_IGUAL TK_DIG TK_TO TK_INT_SIM TK_STEP TK_DIG bloque next 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-9)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-8)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-8)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-8)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).value;
		int token4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).left;
		int token4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).right;
		Object token4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).value;
		int token5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int token5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token5 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token6left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).left;
		int token6right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).right;
		Object token6 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).value;
		int token7left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int token7right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token7 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int token8left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int token8right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token8 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		
			parser.declarar(token2);
			parser.declarar(token6);
			
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("for",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // for ::= TK_FOR TK_INT_SIM TK_IGUAL TK_DIG TK_TO TK_DIG bloque next 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).left;
		int token4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).right;
		Object token4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).value;
		int token5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int token5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token5 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int token6left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int token6right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token6 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		
			parser.declarar(token2);
			
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("for",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // for ::= TK_FOR TK_INT_SIM TK_IGUAL TK_DIG TK_TO TK_INT_SIM bloque next 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).left;
		int token4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).right;
		Object token4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).value;
		int token5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int token5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token5 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int token6left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int token6right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token6 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		
			parser.declarar(token2);
			parser.declarar(token6);
			
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("for",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cadena ::= TK_ID 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
				parser.check(token);
				
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("cadena",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cadena ::= TK_CADENA 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
				String aux = token.toString();
				if(aux.length()>18) {
					System.out.println("Error en " + aux + " Maximo 18 caracteres");
					parser.err_semantico++;
				}
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("cadena",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // numerico ::= TK_INT_SUS 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
				parser.check(token);
				
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("numerico",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // numerico ::= TK_INT_SIM 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
				parser.check(token);
				
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("numerico",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // numerico ::= TK_DIG 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
				String aux = token.toString();
				if(aux.contains(",")) {
					if(aux.length()>8){
						System.out.println("Error en " + aux + " Maximo 6 cifras decimales");
						parser.err_semantico++;
					}
				}
				
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("numerico",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicional ::= TK_IF expresion comparacion expresion TK_THEN goto 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		

				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicional ::= TK_IF expresion comparacion expresion TK_THEN numerico 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		

				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicional ::= TK_IF expresion comparacion numerico TK_THEN goto 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		

				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicional ::= TK_IF expresion comparacion numerico TK_THEN numerico 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		

				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicional ::= TK_IF numerico comparacion expresion TK_THEN goto 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		

				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicional ::= TK_IF numerico comparacion expresion TK_THEN numerico 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		

				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicional ::= TK_IF numerico comparacion numerico TK_THEN goto 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		

				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicional ::= TK_IF numerico comparacion numerico TK_THEN numerico 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		

				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicional ::= TK_IF cadena comparacion expresion TK_THEN goto 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		

				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicional ::= TK_IF cadena comparacion expresion TK_THEN numerico 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		

				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicional ::= TK_IF cadena comparacion cadena TK_THEN goto 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		

				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicional ::= TK_IF cadena comparacion cadena TK_THEN numerico 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
				
				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcion ::= go 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcion ::= on 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcion ::= restore 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcion ::= randomize 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcion ::= gosub 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcion ::= def 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcion ::= dim 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funcion ::= read 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcion ::= data 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funcion ::= goto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funcion ::= input 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funcion ::= print 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcion ::= let 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcion ::= condicional 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcion ::= for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcion ::= atn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion ::= cos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcion ::= exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcion ::= int 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcion ::= log 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcion ::= rnd 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcion ::= sgn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcion ::= sin 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion ::= sqr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= tan 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= abs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fin ::= TK_DIG TK_STOP 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			String aux = token.toString();
			int valor = Integer.parseInt(aux);
			parser.getLinea().add(valor);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("fin",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fin ::= TK_DIG TK_END 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			String aux = token.toString();
			int valor = Integer.parseInt(aux);
			parser.getLinea().add(valor);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("fin",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // linea ::= error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("linea",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // linea ::= TK_DIG funcion 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
			String aux = token.toString();
			int valor = Integer.parseInt(aux);
			parser.getLinea().add(valor);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("linea",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque ::= bloque linea 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("bloque",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= linea 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("bloque",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoCup$parser.done_parsing();
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque fin 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("programa",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

