
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 12 00:29:09 CEST 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import javax.swing.JFileChooser;
import java.util.*;
import java.util.Scanner;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 12 00:29:09 CEST 2018
  */
public class AnalizadorSintacticoCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoCup() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\041\004\000\002\002\004\000\002\042" +
    "\003\000\002\042\004\000\002\044\004\000\002\044\003" +
    "\000\002\045\004\000\002\045\004\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\017\010\000\002\017\010\000\002\017\010\000" +
    "\002\017\010\000\002\017\010\000\002\017\010\000\002" +
    "\016\012\000\002\016\012\000\002\016\014\000\002\016" +
    "\014\000\002\037\005\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\024\004\000\002\032\003\000" +
    "\002\031\003\000\002\031\005\000\002\022\004\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\020\006" +
    "\000\002\020\005\000\002\020\004\000\002\021\006\000" +
    "\002\021\005\000\002\025\004\000\002\040\004\000\002" +
    "\026\007\000\002\026\012\000\002\027\006\000\002\030" +
    "\003\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\002\006\000\002\014\006\000\002\013\006\000" +
    "\002\012\006\000\002\011\006\000\002\010\006\000\002" +
    "\007\006\000\002\006\006\000\002\005\006\000\002\004" +
    "\006\000\002\003\006\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\006\003\005\071\006\001\002\000\004\002" +
    "\301\001\002\000\010\003\ufffc\026\ufffc\071\ufffc\001\002" +
    "\000\062\004\025\005\056\006\033\010\021\012\060\013" +
    "\054\014\027\015\075\016\050\021\063\022\042\023\053" +
    "\025\065\033\071\034\020\035\040\036\031\037\015\040" +
    "\043\041\023\042\026\043\045\044\073\045\017\001\002" +
    "\000\010\003\uffff\026\uffff\071\uffff\001\002\000\006\003" +
    "\005\071\011\001\002\000\066\004\025\005\056\006\033" +
    "\007\055\010\021\012\060\013\054\014\027\015\075\016" +
    "\050\021\063\022\042\023\053\025\065\030\051\033\071" +
    "\034\020\035\040\036\031\037\015\040\043\041\023\042" +
    "\026\043\045\044\073\045\017\001\002\000\010\003\ufffe" +
    "\026\ufffe\071\ufffe\001\002\000\004\002\001\001\002\000" +
    "\010\003\uffe6\026\uffe6\071\uffe6\001\002\000\004\052\276" +
    "\001\002\000\010\003\uffea\026\uffea\071\uffea\001\002\000" +
    "\004\052\273\001\002\000\004\052\270\001\002\000\004" +
    "\047\243\001\002\000\010\003\ufff0\026\ufff0\071\ufff0\001" +
    "\002\000\004\052\240\001\002\000\010\003\ufff3\026\ufff3" +
    "\071\ufff3\001\002\000\010\046\153\047\150\050\151\001" +
    "\002\000\004\052\234\001\002\000\012\046\107\047\103" +
    "\050\106\071\105\001\002\000\010\003\ufff6\026\ufff6\071" +
    "\ufff6\001\002\000\004\052\205\001\002\000\010\003\uffec" +
    "\026\uffec\071\uffec\001\002\000\004\050\204\001\002\000" +
    "\010\003\uffe3\026\uffe3\071\uffe3\001\002\000\010\003\uffe5" +
    "\026\uffe5\071\uffe5\001\002\000\010\003\uffe7\026\uffe7\071" +
    "\uffe7\001\002\000\010\003\uffe9\026\uffe9\071\uffe9\001\002" +
    "\000\004\052\201\001\002\000\010\003\uffe2\026\uffe2\071" +
    "\uffe2\001\002\000\010\003\uffbe\026\uffbe\071\uffbe\001\002" +
    "\000\004\052\176\001\002\000\010\003\ufff9\026\ufff9\071" +
    "\ufff9\001\002\000\004\052\173\001\002\000\010\003\ufff7" +
    "\026\ufff7\071\ufff7\001\002\000\010\003\ufffd\026\ufffd\071" +
    "\ufffd\001\002\000\010\046\164\047\162\050\163\001\002" +
    "\000\004\002\ufffa\001\002\000\010\003\uffed\026\uffed\071" +
    "\uffed\001\002\000\010\046\153\047\150\050\151\001\002" +
    "\000\004\071\147\001\002\000\004\002\ufffb\001\002\000" +
    "\004\051\123\001\002\000\010\003\ufff2\026\ufff2\071\ufff2" +
    "\001\002\000\012\046\107\047\103\050\106\071\105\001" +
    "\002\000\010\003\ufff8\026\ufff8\071\ufff8\001\002\000\010" +
    "\003\uffef\026\uffef\071\uffef\001\002\000\014\046\107\047" +
    "\103\050\106\071\105\072\115\001\002\000\010\003\uffee" +
    "\026\uffee\071\uffee\001\002\000\010\003\uffd2\026\uffd2\071" +
    "\uffd2\001\002\000\010\003\ufff4\026\ufff4\071\ufff4\001\002" +
    "\000\010\003\uffe4\026\uffe4\071\uffe4\001\002\000\010\003" +
    "\uffeb\026\uffeb\071\uffeb\001\002\000\004\052\111\001\002" +
    "\000\010\003\ufff5\026\ufff5\071\ufff5\001\002\000\004\052" +
    "\102\001\002\000\010\003\uffe8\026\uffe8\071\uffe8\001\002" +
    "\000\004\072\077\001\002\000\010\003\ufff1\026\ufff1\071" +
    "\ufff1\001\002\000\004\062\100\001\002\000\012\003\uffc4" +
    "\026\uffc4\046\101\071\uffc4\001\002\000\010\003\uffc5\026" +
    "\uffc5\071\uffc5\001\002\000\012\046\107\047\103\050\106" +
    "\071\105\001\002\000\042\003\uffa3\026\uffa3\031\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3" +
    "\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\001" +
    "\002\000\004\053\110\001\002\000\042\003\uffa1\026\uffa1" +
    "\031\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060" +
    "\uffa1\061\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1" +
    "\071\uffa1\001\002\000\042\003\uffa2\026\uffa2\031\uffa2\053" +
    "\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2" +
    "\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\001" +
    "\002\000\042\003\uffa4\026\uffa4\031\uffa4\053\uffa4\054\uffa4" +
    "\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\064\uffa4\065" +
    "\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\001\002\000\010" +
    "\003\uffb8\026\uffb8\071\uffb8\001\002\000\012\046\107\047" +
    "\103\050\106\071\105\001\002\000\004\053\113\001\002" +
    "\000\010\003\uffba\026\uffba\071\uffba\001\002\000\010\003" +
    "\uffc6\026\uffc6\071\uffc6\001\002\000\004\062\116\001\002" +
    "\000\012\003\uffc7\026\uffc7\046\117\071\uffc7\001\002\000" +
    "\010\003\uffc8\026\uffc8\071\uffc8\001\002\000\006\003\005" +
    "\071\006\001\002\000\010\003\005\026\122\071\006\001" +
    "\002\000\010\003\uffbf\026\uffbf\071\uffbf\001\002\000\004" +
    "\047\124\001\002\000\006\052\126\054\125\001\002\000" +
    "\012\046\107\047\103\050\106\071\105\001\002\000\012" +
    "\046\107\047\103\050\106\071\105\001\002\000\004\053" +
    "\130\001\002\000\004\054\131\001\002\000\012\046\107" +
    "\047\103\050\106\071\105\001\002\000\014\064\136\065" +
    "\141\066\135\067\137\070\140\001\002\000\022\003\uffc0" +
    "\026\uffc0\064\136\065\141\066\135\067\137\070\140\071" +
    "\uffc0\001\002\000\012\046\107\047\103\050\106\071\105" +
    "\001\002\000\014\046\uffa7\047\uffa7\050\uffa7\071\uffa7\072" +
    "\uffa7\001\002\000\014\046\uffa9\047\uffa9\050\uffa9\071\uffa9" +
    "\072\uffa9\001\002\000\014\046\uffa6\047\uffa6\050\uffa6\071" +
    "\uffa6\072\uffa6\001\002\000\014\046\uffa5\047\uffa5\050\uffa5" +
    "\071\uffa5\072\uffa5\001\002\000\014\046\uffa8\047\uffa8\050" +
    "\uffa8\071\uffa8\072\uffa8\001\002\000\024\003\uffbc\026\uffbc" +
    "\031\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071" +
    "\uffbc\001\002\000\014\046\107\047\103\050\106\071\105" +
    "\072\145\001\002\000\024\003\uffbd\026\uffbd\031\uffbd\064" +
    "\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\001\002" +
    "\000\024\003\uffbb\026\uffbb\031\uffbb\064\uffbb\065\uffbb\066" +
    "\uffbb\067\uffbb\070\uffbb\071\uffbb\001\002\000\010\003\uffc1" +
    "\026\uffc1\071\uffc1\001\002\000\010\003\uffc2\026\uffc2\071" +
    "\uffc2\001\002\000\012\003\uffcd\026\uffcd\063\160\071\uffcd" +
    "\001\002\000\012\003\uffcc\026\uffcc\063\156\071\uffcc\001" +
    "\002\000\010\003\uffd3\026\uffd3\071\uffd3\001\002\000\012" +
    "\003\uffce\026\uffce\063\154\071\uffce\001\002\000\010\046" +
    "\153\047\150\050\151\001\002\000\010\003\uffcb\026\uffcb" +
    "\071\uffcb\001\002\000\010\046\153\047\150\050\151\001" +
    "\002\000\010\003\uffc9\026\uffc9\071\uffc9\001\002\000\010" +
    "\046\153\047\150\050\151\001\002\000\010\003\uffca\026" +
    "\uffca\071\uffca\001\002\000\004\054\171\001\002\000\004" +
    "\054\167\001\002\000\004\054\165\001\002\000\012\046" +
    "\107\047\103\050\106\071\105\001\002\000\022\003\uffd6" +
    "\026\uffd6\064\136\065\141\066\135\067\137\070\140\071" +
    "\uffd6\001\002\000\004\072\170\001\002\000\010\003\uffd4" +
    "\026\uffd4\071\uffd4\001\002\000\004\072\172\001\002\000" +
    "\010\003\uffd5\026\uffd5\071\uffd5\001\002\000\012\046\107" +
    "\047\103\050\106\071\105\001\002\000\004\053\175\001" +
    "\002\000\010\003\uffb7\026\uffb7\071\uffb7\001\002\000\012" +
    "\046\107\047\103\050\106\071\105\001\002\000\004\053" +
    "\200\001\002\000\010\003\uffb4\026\uffb4\071\uffb4\001\002" +
    "\000\012\046\107\047\103\050\106\071\105\001\002\000" +
    "\004\053\203\001\002\000\010\003\uffb1\026\uffb1\071\uffb1" +
    "\001\002\000\010\003\uffc3\026\uffc3\071\uffc3\001\002\000" +
    "\012\046\107\047\103\050\106\071\105\001\002\000\004" +
    "\053\207\001\002\000\010\003\uffb2\026\uffb2\071\uffb2\001" +
    "\002\000\016\054\212\055\213\056\216\057\215\060\214" +
    "\061\217\001\002\000\014\046\107\047\103\050\106\071" +
    "\105\072\221\001\002\000\014\046\uffaa\047\uffaa\050\uffaa" +
    "\071\uffaa\072\uffaa\001\002\000\014\046\uffaf\047\uffaf\050" +
    "\uffaf\071\uffaf\072\uffaf\001\002\000\014\046\uffad\047\uffad" +
    "\050\uffad\071\uffad\072\uffad\001\002\000\014\046\uffac\047" +
    "\uffac\050\uffac\071\uffac\072\uffac\001\002\000\014\046\uffae" +
    "\047\uffae\050\uffae\071\uffae\072\uffae\001\002\000\014\046" +
    "\uffab\047\uffab\050\uffab\071\uffab\072\uffab\001\002\000\016" +
    "\031\231\064\136\065\141\066\135\067\137\070\140\001" +
    "\002\000\004\031\226\001\002\000\016\031\223\064\136" +
    "\065\141\066\135\067\137\070\140\001\002\000\014\013" +
    "\054\046\107\047\103\050\106\071\105\001\002\000\010" +
    "\003\uffdd\026\uffdd\071\uffdd\001\002\000\010\003\uffdc\026" +
    "\uffdc\071\uffdc\001\002\000\014\013\054\046\107\047\103" +
    "\050\106\071\105\001\002\000\010\003\uffe1\026\uffe1\071" +
    "\uffe1\001\002\000\010\003\uffe0\026\uffe0\071\uffe0\001\002" +
    "\000\014\013\054\046\107\047\103\050\106\071\105\001" +
    "\002\000\010\003\uffdf\026\uffdf\071\uffdf\001\002\000\010" +
    "\003\uffde\026\uffde\071\uffde\001\002\000\012\046\107\047" +
    "\103\050\106\071\105\001\002\000\004\053\236\001\002" +
    "\000\010\003\uffb6\026\uffb6\071\uffb6\001\002\000\010\003" +
    "\uffcf\026\uffcf\071\uffcf\001\002\000\012\046\107\047\103" +
    "\050\106\071\105\001\002\000\004\053\242\001\002\000" +
    "\010\003\uffb5\026\uffb5\071\uffb5\001\002\000\004\054\244" +
    "\001\002\000\004\071\245\001\002\000\004\032\246\001" +
    "\002\000\006\047\247\071\250\001\002\000\010\003\005" +
    "\027\262\071\006\001\002\000\010\003\005\027\251\071" +
    "\006\001\002\000\004\071\257\001\002\000\006\003\005" +
    "\071\254\001\002\000\010\003\uffda\026\uffda\071\uffda\001" +
    "\002\000\064\004\025\005\056\006\033\010\021\012\060" +
    "\013\054\014\027\015\075\016\050\017\255\021\063\022" +
    "\042\023\053\025\065\033\071\034\020\035\040\036\031" +
    "\037\015\040\043\041\023\042\026\043\045\044\073\045" +
    "\017\001\002\000\004\047\256\001\002\000\010\003\uffd7" +
    "\026\uffd7\071\uffd7\001\002\000\006\003\005\071\006\001" +
    "\002\000\006\003\005\071\254\001\002\000\010\003\uffd8" +
    "\026\uffd8\071\uffd8\001\002\000\004\071\265\001\002\000" +
    "\006\003\005\071\254\001\002\000\010\003\uffdb\026\uffdb" +
    "\071\uffdb\001\002\000\006\003\005\071\006\001\002\000" +
    "\006\003\005\071\254\001\002\000\010\003\uffd9\026\uffd9" +
    "\071\uffd9\001\002\000\012\046\107\047\103\050\106\071" +
    "\105\001\002\000\004\053\272\001\002\000\010\003\uffb0" +
    "\026\uffb0\071\uffb0\001\002\000\012\046\107\047\103\050" +
    "\106\071\105\001\002\000\004\053\275\001\002\000\010" +
    "\003\uffb9\026\uffb9\071\uffb9\001\002\000\012\046\107\047" +
    "\103\050\106\071\105\001\002\000\004\053\300\001\002" +
    "\000\010\003\uffb3\026\uffb3\071\uffb3\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\010\041\003\042\007\044\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\002\043\003\061" +
    "\004\021\005\075\006\056\007\023\010\065\011\071\012" +
    "\027\013\045\014\060\015\031\016\063\017\051\020\067" +
    "\021\015\022\073\024\035\025\013\026\034\027\066\030" +
    "\033\032\040\040\036\043\046\001\001\000\002\001\001" +
    "\000\006\044\011\045\012\001\001\000\064\002\043\003" +
    "\061\004\021\005\075\006\056\007\023\010\065\011\071" +
    "\012\027\013\045\014\060\015\031\016\063\017\051\020" +
    "\067\021\015\022\073\024\035\025\013\026\034\027\066" +
    "\030\033\032\040\040\036\043\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\236\001\001\000\002\001\001\000" +
    "\004\035\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\042\120\044\006\001\001" +
    "\000\004\044\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\145\001\001\000\004" +
    "\035\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\035\131\036\132\001\001\000\004\034\142\001\001" +
    "\000\004\034\133\001\001\000\004\035\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\154" +
    "\001\001\000\002\001\001\000\004\023\156\001\001\000" +
    "\002\001\001\000\004\023\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\035\131\036\165\001\001\000\004\034\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\210\001\001\000\006\035\217\036\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\142\001\001\000\002\001\001\000\004\034\133\001\001" +
    "\000\006\035\223\040\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\226\040\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\035\231\040\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\042\262\044\006\001\001" +
    "\000\006\042\251\044\006\001\001\000\002\001\001\000" +
    "\006\037\252\044\011\001\001\000\002\001\001\000\064" +
    "\002\043\003\061\004\021\005\075\006\056\007\023\010" +
    "\065\011\071\012\027\013\045\014\060\015\031\016\063" +
    "\017\051\020\067\021\015\022\073\024\035\025\013\026" +
    "\034\027\066\030\033\032\040\040\036\043\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\257\044" +
    "\006\001\001\000\006\037\260\044\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\263\044\011\001" +
    "\001\000\002\001\001\000\006\042\265\044\006\001\001" +
    "\000\006\037\266\044\011\001\001\000\002\001\001\000" +
    "\004\035\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\276\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	int err_sintactico = 0;
	int err_semantico = 0;
	
	
	boolean isRead = false;
	boolean isRnd = false;
	boolean isData = false;
	
	static HashMap<String, Object> tablaSimbolos = new HashMap<String, Object> ();
	ArrayList<String> listaTokens = new ArrayList<String>();

	public static void main (String argsv[]) throws Exception {
		
		BufferedReader nombreArchivo = new BufferedReader(new InputStreamReader(System.in));
        String entrada = nombreArchivo.readLine();
        //String entrada = "Prueba1.bas";
        String tipoCorrecto = "bas";
		String tipoArchivo = entrada.substring(entrada.lastIndexOf(".")+1);
        if(!tipoArchivo.equals(tipoCorrecto)){
    		System.err.println("Extension del archivo necesaria '.bas'\n");
    	} else {
	        FileInputStream fileInput = new FileInputStream(entrada);
	  		AnalizadorSintacticoCup parser;
	  		AnalizadorLexico lexico = new AnalizadorLexico(fileInput);
	  		parser = new AnalizadorSintacticoCup(lexico);
	    	parser.parse();
	    	
	    	if(parser.err_sintactico == 0 && parser.err_semantico == 0) {
	    		System.out.println("Analisis realizado correctamente");
	    		System.out.println("Lista de Tokens identificados");
	    		parser.printToken();
	    		parser.print();
	    	} else { 
	    		System.out.println("Hay errores en el codigo");
	    		System.out.println("Errores sintacticos: " + parser.err_sintactico);
	    		System.out.println("Errores semanticos: " + parser.err_semantico);
	    		System.out.println("Lista de Tokens identificados");
	    		parser.printToken();
	    		parser.print();
	    	}
    	}

   	}

   	public void syntax_error(Symbol s) {
  		System.out.println("Error sintactico en linea "+(s.left)+" y columna "+(s.right+1)+ ": token leido \""+s.value+"\", se esperaba otro token.\n");
  		err_sintactico++;
	}

	public HashMap getTablaSimbolos(){
  		return tablaSimbolos;
  	}

  	public void print() {
  		System.out.println("");
  		System.out.println("   ::: TABLA DE SIMBOLOS :::    ");	
	  	System.out.println("--------------------------------");
	  	System.out.println("Tamaño de la tabla de simbolos: " + tablaSimbolos.size());
		Iterator itert = tablaSimbolos.entrySet().iterator();
		while (itert.hasNext()) {
	    	Map.Entry entry = (Map.Entry)itert.next();
	    	System.out.println(entry.getKey()); 
		}
	  	System.out.println("--------------------------------");	
  	}

	public ArrayList getListaToken() {
		return listaTokens;
	}
	
	public void printToken() {
		int i = 0;
		while(i < getListaToken().size()) {
			if (i%6 == 0) {
				System.out.println("");
			}
			System.out.print(getListaToken().get(i) + "\t");
			i++;
		}
		System.out.println("");
	}

	public void declarar(Object dat) {
		if(!getTablaSimbolos().containsKey(dat)){
			String tipo = "cadena";
			Ident id = new Ident(dat.toString(), tipo);
			getTablaSimbolos().put(id.getNombre(), id);
		}
	}
	
	public void check(Object dat) {
		if(!getTablaSimbolos().containsKey(dat)){
				System.out.println("Variable " + dat.toString() + " no declarada");
				err_semantico++;
			}
	}

	/*public boolean comprobarTipo(Symbol s1, Symbol s2) {

	}*/


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoCup$actions {


	

  private final AnalizadorSintacticoCup parser;

  /** Constructor */
  CUP$AnalizadorSintacticoCup$actions(AnalizadorSintacticoCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoCup$do_action(
    int                        CUP$AnalizadorSintacticoCup$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoCup$parser,
    java.util.Stack            CUP$AnalizadorSintacticoCup$stack,
    int                        CUP$AnalizadorSintacticoCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoCup$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dato ::= TK_DIG 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.getListaToken().add(dat.toString());
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // dato ::= TK_INT_SUS 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.getListaToken().add(dat.toString());
			parser.check(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dato ::= TK_INT_SIM 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.getListaToken().add(dat.toString());
			parser.check(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // dato ::= TK_ID 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.getListaToken().add(dat.toString());
			parser.check(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("dato",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operador ::= TK_EL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("operador",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operador ::= TK_DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("operador",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operador ::= TK_MUL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("operador",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operador ::= TK_RESTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("operador",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operador ::= TK_SUMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("operador",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comparacion ::= TK_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("comparacion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comparacion ::= TK_DISTINTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("comparacion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comparacion ::= TK_MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("comparacion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comparacion ::= TK_MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("comparacion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comparacion ::= TK_MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("comparacion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comparacion ::= TK_MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("comparacion",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // atn ::= TK_ATN TK_PAR_IZQ dato TK_PAR_DER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("atn",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cos ::= TK_COS TK_PAR_IZQ dato TK_PAR_DER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("cos",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exp ::= TK_EXP TK_PAR_IZQ dato TK_PAR_DER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // int ::= TK_INT TK_PAR_IZQ dato TK_PAR_DER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("int",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // log ::= TK_LOG TK_PAR_IZQ dato TK_PAR_DER 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("log",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // rnd ::= TK_RND TK_PAR_IZQ dato TK_PAR_DER 
            {
              Object RESULT =null;
		
			parser.isRnd = true;
	   
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("rnd",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sgn ::= TK_SGN TK_PAR_IZQ dato TK_PAR_DER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("sgn",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sin ::= TK_SIN TK_PAR_IZQ dato TK_PAR_DER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("sin",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sqr ::= TK_SQR TK_PAR_IZQ dato TK_PAR_DER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("sqr",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tan ::= TK_TAN TK_PAR_IZQ dato TK_PAR_DER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("tan",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // abs ::= TK_ABS TK_PAR_IZQ dato TK_PAR_DER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("abs",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= dato operador TK_CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresion operador dato 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= dato operador dato 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // randomize ::= TK_RANDOMIZE 
            {
              Object RESULT =null;
		
			if(!parser.isRnd) {
				System.out.println("No se ha encontrado la instruccion RND");
				System.out.println("Para usar esta funcion se necesita una invocacion previa de la funcion RND");
				parser.err_semantico++;
			} 
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("randomize",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // gosub ::= TK_GOSUB dato bloque TK_RETURN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("gosub",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // def ::= TK_DEF TK_FN TK_INT_SIM TK_PAR_IZQ dato TK_PAR_DER TK_IGUAL expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("def",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // def ::= TK_DEF TK_FN TK_INT_SIM TK_IGUAL dato 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("def",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // goto ::= TK_GOTO TK_DIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("goto",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dim ::= TK_DIM TK_INT_SUS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("dim",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // input ::= TK_INPUT TK_CADENA TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("input",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // input ::= TK_INPUT TK_CADENA TK_PUNTOCOMA TK_ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("input",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // print ::= TK_PRINT dato 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("print",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // print ::= TK_PRINT TK_CADENA TK_PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("print",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // print ::= TK_PRINT TK_CADENA TK_PUNTOCOMA TK_ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("print",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // c_data ::= TK_INT_SUS TK_COMA c_data 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
			parser.getListaToken().add(token.toString());
			parser.getListaToken().add(dat.toString());
			parser.declarar(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_data",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // c_data ::= TK_INT_SIM TK_COMA c_data 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
			parser.getListaToken().add(token.toString());
			parser.getListaToken().add(dat.toString());
			parser.declarar(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_data",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // c_data ::= TK_ID TK_COMA c_data 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
			parser.getListaToken().add(token.toString());
			parser.getListaToken().add(dat.toString());
			parser.declarar(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_data",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // c_data ::= TK_INT_SUS 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.getListaToken().add(dat.toString());
			parser.declarar(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_data",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // c_data ::= TK_INT_SIM 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.getListaToken().add(dat.toString());
			parser.declarar(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_data",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // c_data ::= TK_ID 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.getListaToken().add(dat.toString());
			parser.declarar(dat);
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_data",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // data ::= TK_DATA c_data 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
			parser.getListaToken().add(token.toString());
			parser.isData = true;
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("data",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // c_read ::= dato TK_COMA c_read 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
		  	parser.getListaToken().add(token.toString());
		  
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_read",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // c_read ::= dato 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("c_read",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // restore ::= TK_RESTORE 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.getListaToken().add(token.toString());
			if (!parser.isRead) {
				System.out.println("No se ha encontrado la instruccion READ");
				parser.err_semantico++;
			}
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("restore",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // read ::= TK_READ c_data 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
			parser.getListaToken().add(token.toString());
			if (!parser.isData) {
				System.out.println("Se necesita una declaracion previa de DATA");
				parser.err_semantico++;
			}
			parser.isRead = true;
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("read",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // let ::= TK_LET TK_INT_SUS TK_IGUAL TK_CADENA 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
				parser.declarar(dat);
				parser.getListaToken().add(token.toString());
				parser.getListaToken().add(token2.toString());
				parser.getListaToken().add("Cadena");
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("let",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // let ::= TK_LET TK_INT_SIM TK_IGUAL TK_CADENA 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
				parser.declarar(dat);
				parser.getListaToken().add(token.toString());
				parser.getListaToken().add(token2.toString());
				parser.getListaToken().add("Cadena");
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("let",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // let ::= TK_LET TK_ID TK_IGUAL expresion 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int datleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object dat = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
				parser.declarar(dat);
				parser.getListaToken().add(token.toString());
				parser.getListaToken().add(token2.toString());
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("let",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // next ::= TK_DIG TK_NEXT TK_INT_SIM 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
		parser.declarar(token3);
		parser.getListaToken().add(token.toString());
		parser.getListaToken().add(token2.toString());
		parser.getListaToken().add(token3.toString());
	
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("next",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // for ::= TK_FOR TK_INT_SIM TK_IGUAL TK_DIG TK_TO TK_DIG TK_STEP TK_DIG bloque next 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-9)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-8)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-8)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-8)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).value;
		int token4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).left;
		int token4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).right;
		Object token4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).value;
		int token5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int token5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token5 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token6left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).left;
		int token6right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).right;
		Object token6 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).value;
		int token7left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int token7right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token7 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int token8left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int token8right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token8 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		
			parser.declarar(token2);
			parser.getListaToken().add(token.toString());
			parser.getListaToken().add(token2.toString());
			parser.getListaToken().add(token3.toString());
			parser.getListaToken().add(token4.toString());
			parser.getListaToken().add(token5.toString());
			parser.getListaToken().add(token6.toString());
			parser.getListaToken().add(token7.toString());
			parser.getListaToken().add(token8.toString());
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("for",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // for ::= TK_FOR TK_INT_SIM TK_IGUAL TK_DIG TK_TO TK_INT_SIM TK_STEP TK_DIG bloque next 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-9)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-8)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-8)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-8)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).value;
		int token4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).left;
		int token4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).right;
		Object token4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).value;
		int token5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int token5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token5 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token6left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).left;
		int token6right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).right;
		Object token6 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).value;
		int token7left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int token7right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token7 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int token8left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int token8right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token8 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		
			parser.declarar(token2);
			parser.declarar(token6);
			parser.getListaToken().add(token.toString());
			parser.getListaToken().add(token2.toString());
			parser.getListaToken().add(token3.toString());
			parser.getListaToken().add(token4.toString());
			parser.getListaToken().add(token5.toString());
			parser.getListaToken().add(token6.toString());
			parser.getListaToken().add(token7.toString());
			parser.getListaToken().add(token8.toString());
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("for",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // for ::= TK_FOR TK_INT_SIM TK_IGUAL TK_DIG TK_TO TK_DIG bloque next 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).left;
		int token4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).right;
		Object token4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).value;
		int token5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int token5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token5 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int token6left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int token6right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token6 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		
			parser.declarar(token2);
			parser.getListaToken().add(token.toString());
			parser.getListaToken().add(token2.toString());
			parser.getListaToken().add(token3.toString());
			parser.getListaToken().add(token4.toString());
			parser.getListaToken().add(token5.toString());
			parser.getListaToken().add(token6.toString());
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("for",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // for ::= TK_FOR TK_INT_SIM TK_IGUAL TK_DIG TK_TO TK_INT_SIM bloque next 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-6)).value;
		int token3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).left;
		int token3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).right;
		Object token3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)).value;
		int token4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).left;
		int token4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).right;
		Object token4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-4)).value;
		int token5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).left;
		int token5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).right;
		Object token5 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-3)).value;
		int token6left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).left;
		int token6right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).right;
		Object token6 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-2)).value;
		
			parser.declarar(token2);
			parser.declarar(token6);
			parser.getListaToken().add(token.toString());
			parser.getListaToken().add(token2.toString());
			parser.getListaToken().add(token3.toString());
			parser.getListaToken().add(token4.toString());
			parser.getListaToken().add(token5.toString());
			parser.getListaToken().add(token6.toString());
			
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("for",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicional ::= TK_IF dato comparacion expresion TK_THEN goto 
            {
              Object RESULT =null;
		
				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicional ::= TK_IF dato comparacion expresion TK_THEN dato 
            {
              Object RESULT =null;
		
				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicional ::= TK_IF dato comparacion dato TK_THEN goto 
            {
              Object RESULT =null;
		
				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicional ::= TK_IF dato comparacion dato TK_THEN dato 
            {
              Object RESULT =null;
		
				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicional ::= TK_IF dato comparacion TK_CADENA TK_THEN goto 
            {
              Object RESULT =null;
		
				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicional ::= TK_IF dato comparacion TK_CADENA TK_THEN dato 
            {
              Object RESULT =null;
		

				
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcion ::= restore 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcion ::= randomize 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcion ::= gosub 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcion ::= def 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcion ::= dim 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funcion ::= read 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcion ::= data 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funcion ::= goto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funcion ::= input 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funcion ::= print 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcion ::= let 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcion ::= condicional 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcion ::= for 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcion ::= atn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion ::= cos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcion ::= exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcion ::= int 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcion ::= log 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcion ::= rnd 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcion ::= sgn 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcion ::= sin 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion ::= sqr 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= tan 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= abs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("funcion",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fin ::= TK_DIG TK_STOP 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.getListaToken().add(token.toString());
			parser.getListaToken().add(token2.toString());
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("fin",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fin ::= TK_DIG TK_END 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		int token2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).left;
		int token2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()).right;
		Object token2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.peek()).value;
		
			parser.getListaToken().add(token.toString());
			parser.getListaToken().add(token2.toString());
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("fin",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // linea ::= error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("linea",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // linea ::= TK_DIG funcion 
            {
              Object RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		
			parser.getListaToken().add(token.toString());
		
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("linea",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque ::= bloque linea 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("bloque",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= linea 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("bloque",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoCup$parser.done_parsing();
          return CUP$AnalizadorSintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque fin 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoCup$result = parser.getSymbolFactory().newSymbol("programa",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.elementAt(CUP$AnalizadorSintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoCup$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

