
import java_cup.runtime.*;
import java.io.*;
import javax.swing.JFileChooser;
import java.util.*;
import java.util.Scanner;

parser code
{:

	int err_sintactico = 0;
	int err_semantico = 0;
	
	
	boolean isRead = false;
	boolean isRnd = false;
	boolean isData = false;
	

	static HashMap<String, Object> tablaSimbolos = new HashMap<String, Object> ();


	ArrayList<Integer> numerosLinea = new ArrayList<Integer>();

	public static void main (String argsv[]) throws Exception {
		
		BufferedReader nombreArchivo = new BufferedReader(new InputStreamReader(System.in));
        String entrada = nombreArchivo.readLine();
        //String entrada = "Prueba1.bas";
        String tipoCorrecto = "bas";
		String tipoArchivo = entrada.substring(entrada.lastIndexOf(".")+1);
        if(!tipoArchivo.equals(tipoCorrecto)){
    		System.err.println("Extension del archivo necesaria '.bas'\n");
    	} else {
	        FileInputStream fileInput = new FileInputStream(entrada);
	  		AnalizadorSintacticoCup parser;
	  		AnalizadorLexico lexico = new AnalizadorLexico(fileInput);
	  		parser = new AnalizadorSintacticoCup(lexico);
	    	parser.parse();
	    	
	    	if(parser.err_sintactico == 0 && parser.err_semantico == 0) {
	    		//if (parser.isSorted()) {
		    		System.out.println("Analisis realizado correctamente");
		    		System.out.println("Lista de Tokens identificados");
		    		//parser.printToken();
		    		lexico.pintarLexemas();
		    		parser.mostrarTabla();
		    	/*} else {
		    		System.out.println("Los numeros de linea estan mal numerados");
		    	}*/
	    	} else { 
	    		System.out.println("Hay errores en el codigo");
	    		System.out.println("Errores sintacticos: " + parser.err_sintactico);
	    		System.out.println("Errores semanticos: " + parser.err_semantico);
	    	}
    	}

   	}

   	public void syntax_error(Symbol s) {
  		System.out.println("Error sintactico en linea "+(s.left)+" y columna "+(s.right+1)+ ": token leido \""+s.value+"\", se esperaba otro token.\n");
  		err_sintactico++;
	}

	public HashMap getTablaSimbolos(){
  		return tablaSimbolos;
  	}

	
	public ArrayList getLinea() {
		return numerosLinea;
	}

	  public void mostrarTabla(){
	  
	  	System.out.println("    TABLA DE SIMBOLOS     ");	
	  	System.out.println("--------------------------------");
		Iterator itert = tablaSimbolos.entrySet().iterator();
		while (itert.hasNext()) {
	    	Map.Entry entry = (Map.Entry)itert.next();
	    	System.out.println(entry.getKey()); 
		}
	  	System.out.println("--------------------------------");
	  	
	  }
	
	
	public boolean isSorted() {
	    boolean sorted = true;
	    int i = 1;
	    int actual;
	    int anterior = numerosLinea.get(0);  

	    while(i < numerosLinea.size()) {
	    	actual = numerosLinea.get(i);
	    	System.out.print(actual + "\n");
	    	if(!(actual > anterior)) {
	    		System.out.print("Aqui");
	    		sorted = false;
	    	}
	    	anterior = actual;
	    	i++;
	    }
	    return sorted;
	}

	public void declarar(Object dat) {
		if(!getTablaSimbolos().containsKey(dat)){
			String tipo = "cadena";
			Ident id = new Ident(dat.toString(), tipo);
			getTablaSimbolos().put(id.getNombre(), id);
		}
	}
	
	public void check(Object dat) {
		if(!getTablaSimbolos().containsKey(dat)){
				System.out.println("Variable " + dat.toString() + " no declarada");
				err_semantico++;
			}
	}

	/*public boolean comprobarTipo(Symbol s1, Symbol s2) {

	}*/

:}

action code
{:
	
:}

terminal		TK_DATA, TK_DEF, TK_DIM, TK_END, TK_FOR, TK_GO, TK_GOSUB, TK_GOTO, TK_IF;
terminal		TK_INPUT, TK_LET, TK_NEXT, TK_ON, TK_PRINT, TK_RANDOMIZE, TK_READ, TK_RESTORE;
terminal		TK_RETURN, TK_STEP, TK_STOP, TK_THEN, TK_TO, TK_ABS, TK_ATN, TK_COS, TK_EXP, TK_INT;
terminal		TK_LOG, TK_RND, TK_SGN, TK_SIN, TK_SQR, TK_TAN, TK_ID, TK_INT_SIM, TK_INT_SUS, TK_FN; 
terminal		TK_PAR_IZQ, TK_PAR_DER;
terminal		TK_IGUAL, TK_MENOR, TK_MAYOR, TK_MENOR_IGUAL, TK_MAYOR_IGUAL, TK_DISTINTO;
terminal		TK_PUNTOCOMA, TK_COMA;
terminal		TK_SUMA, TK_RESTA, TK_MUL, TK_DIV, TK_EL;
terminal		TK_DIG, TK_CADENA;

non terminal	abs, atn, cos, exp, int, log, rnd, sgn, sin, sqr, tan;
non terminal 	let, for, condicional, print, input, data, c_data, read, dim, c_dim, def, gosub, randomize, restore, go, on;
non terminal	comparacion, operador, numerico, cadena;
non terminal	dato, expresion, next, goto;
non terminal	programa, bloque, funcion, linea, fin;

programa::= bloque fin;

bloque::= linea | bloque linea;

linea::= TK_DIG:token funcion {:
			String aux = token.toString();
			int valor = Integer.parseInt(aux);
			parser.getLinea().add(valor);
			
		:} | error;

fin::= TK_DIG:token TK_END:token2 {:
			String aux = token.toString();
			int valor = Integer.parseInt(aux);
			parser.getLinea().add(valor);
			
		:} | TK_DIG:token TK_STOP:token2 {:
			String aux = token.toString();
			int valor = Integer.parseInt(aux);
			parser.getLinea().add(valor);
			
		:};

funcion::= abs | tan | sqr | sin | sgn | rnd | log | int | exp | cos | atn | for | condicional | let | 
		   print | input | goto | data | read | dim | def | gosub | randomize | restore | on | go;

//Comienzo de estructuras de control
condicional::= TK_IF:token cadena comparacion cadena TK_THEN:token2 numerico {:
				
				:}| TK_IF:token cadena comparacion cadena TK_THEN:token2 goto {:

				:} | TK_IF:token cadena comparacion expresion TK_THEN:token2 numerico {:

				:} | TK_IF:token cadena comparacion expresion TK_THEN:token2 goto {:

				:} | TK_IF:token numerico comparacion numerico TK_THEN:token2 numerico {:

				:} | TK_IF:token numerico comparacion numerico TK_THEN:token2 goto {:

				:} | TK_IF:token numerico comparacion expresion TK_THEN:token2 numerico {:

				:} | TK_IF:token numerico comparacion expresion TK_THEN:token2 goto {:

				:} | TK_IF:token expresion comparacion numerico TK_THEN:token2 numerico {:

				:} | TK_IF:token expresion comparacion numerico TK_THEN:token2 goto {:

				:} | TK_IF:token expresion comparacion expresion TK_THEN:token2 numerico {:

				:} | TK_IF:token expresion comparacion expresion TK_THEN:token2 goto {:

				:};

numerico::= TK_DIG:token {:
				String aux = token.toString();
				if(aux.contains(",")) {
					if(aux.length()>8){
						System.out.println("Error en " + aux + " Maximo 6 cifras decimales");
						parser.err_semantico++;
					}
				}
				
		:} | TK_INT_SIM:token {:
				parser.check(token);
				
		:} | TK_INT_SUS:token {:
				parser.check(token);
				
		:};

cadena::= TK_CADENA:token {:
				String aux = token.toString();
				if(aux.length()>18) {
					System.out.println("Error en " + aux + " Maximo 18 caracteres");
					parser.err_semantico++;
				}
		:}| TK_ID:token {:
				parser.check(token);
				
		:};

//Funcion For
for::= TK_FOR:token TK_INT_SIM:token2 TK_IGUAL:token3 TK_DIG:token4 TK_TO:token5 TK_INT_SIM:token6 bloque next {:
			parser.declarar(token2);
			parser.declarar(token6);
			
			
		:} | TK_FOR:token TK_INT_SIM:token2 TK_IGUAL:token3 TK_DIG:token4 TK_TO:token5 TK_DIG:token6 bloque next {:
			parser.declarar(token2);
			
			
		:} | TK_FOR:token TK_INT_SIM:token2 TK_IGUAL:token3 TK_DIG:token4 TK_TO:token5 TK_INT_SIM:token6 TK_STEP:token7 TK_DIG:token8 bloque next {:
			parser.declarar(token2);
			parser.declarar(token6);
			
			
		:} | TK_FOR:token TK_INT_SIM:token2 TK_IGUAL:token3 TK_DIG:token4 TK_TO:token5 TK_DIG:token6 TK_STEP:token7 TK_DIG:token8 bloque next {:
			parser.declarar(token2);
			
		:};

next::= TK_DIG:token TK_NEXT:token2 TK_INT_SIM:token3 {:
		parser.declarar(token3);
		String aux = token.toString();
		int valor = Integer.parseInt(aux);
		parser.getLinea().add(valor);
		
	:};

//Funcion let
let::= TK_LET:token TK_ID:dat TK_IGUAL:token2 expresion {:
				parser.declarar(dat);

		:} | TK_LET:token TK_ID:dat TK_IGUAL:token2 TK_CADENA {:
				parser.declarar(dat);
				
		:} | TK_LET:token TK_INT_SIM:dat TK_IGUAL:token2 numerico {:
				parser.declarar(dat);

		:} | TK_LET:token TK_INT_SUS:dat TK_IGUAL:token2 numerico {:
				parser.declarar(dat);
		:};
		
//Funcion read
read::= TK_READ:token c_data {:
			if (!parser.isData) {
				System.out.println("Se necesita una declaracion previa de DATA");
				parser.err_semantico++;
			}
			parser.isRead = true;
		:};

restore::= TK_RESTORE:token {:
			if (!parser.isRead) {
				System.out.println("No se ha encontrado la instruccion READ");
				parser.err_semantico++;
			}
		:};
	
//Funcion Data
data::= TK_DATA:token c_data {:
			parser.isData = true;
		:};

c_data::= TK_ID:dat {:
			parser.declarar(dat);
			
		:} | TK_INT_SIM:dat {:
			parser.declarar(dat);
			
		:} | TK_INT_SUS:dat {:
			parser.declarar(dat);
			
		:} | TK_ID:dat TK_COMA:token c_data {:
			parser.declarar(dat);
			
		:} | TK_INT_SIM:dat TK_COMA:token c_data {:
			parser.declarar(dat);
			
		:} | TK_INT_SUS:dat TK_COMA:token c_data {:
			parser.declarar(dat);
			
		:};
		  

//Funcion Print
print::= TK_PRINT:token TK_CADENA:token2 TK_PUNTOCOMA:token3 TK_ID:token4 {:
				parser.check(token4);

		:} | TK_PRINT:token TK_CADENA:token2 {:

		:} | TK_PRINT:token dato {:

		:};

//Funcion Input		
input::= TK_INPUT:token TK_CADENA:token2 TK_PUNTOCOMA:token3 TK_ID:token4 {:
				parser.check(token4);
		:} | TK_INPUT:token TK_CADENA:token2 TK_PUNTOCOMA:token3 {:
		:};

//Funcion Dim
dim::= TK_DIM c_dim;

c_dim::= TK_INT_SIM:token  {:
			parser.declarar(token);
	:} | TK_INT_SUS:token {:
			parser.declarar(token);
	:} | c_dim TK_COMA TK_INT_SIM:token {:
			parser.declarar(token);
	:} | c_dim TK_COMA TK_INT_SUS:token {:
			parser.declarar(token);
	:};

//Funcion goto		
goto::= TK_GOTO:token TK_DIG:token2 {:
	:};

//Funcion Def
def::= TK_DEF:token TK_FN:token2 TK_INT_SIM:token7 TK_PAR_IZQ:token5 TK_INT_SIM:token3 TK_PAR_DER:token6 TK_IGUAL:token4 dato {:
			parser.check(token3);

		:}| TK_DEF:token TK_FN:token2 TK_INT_SIM:token3 TK_IGUAL:token4 expresion {:
			parser.check(token3);

		:} | TK_DEF:token TK_FN:token2 TK_INT_SIM:token7 TK_PAR_IZQ:token5 TK_INT_SIM:token3 TK_PAR_DER:token6 TK_IGUAL:token4 expresion {:
			parser.check(token3);
		:};
	   
//Funcion Gosub
gosub::= TK_GOSUB:token dato bloque TK_RETURN:token2 {:
		:};

//Funcion randomize
randomize::= TK_RANDOMIZE:token {:
			if(!parser.isRnd) {
				System.out.println("No se ha encontrado la instruccion RND");
				System.out.println("Para usar esta funcion se necesita una invocacion previa de la funcion RND");
				parser.err_semantico++;
			} 
		:};

on::= TK_ON {:
	:};
	
go::= TK_GO {:
	:};



expresion::= TK_INT_SIM:token operador TK_DIG:token2 {:
					parser.check(token);

			:} | TK_INT_SUS:token operador TK_DIG:token2 {:
					parser.check(token);
			
			:} | TK_DIG:token operador TK_INT_SIM:token2 {:
					parser.check(token2);
			
			:} | TK_DIG:token operador TK_INT_SUS:token2 {:
					parser.check(token2);
			
			:} | TK_INT_SIM:token operador TK_INT_SUS:token2 {:
					parser.check(token);
					parser.check(token2);
			
			:} | TK_INT_SUS:token operador TK_INT_SIM:token2 {:
					parser.check(token);
					parser.check(token2);

			:} | TK_ID:token operador TK_CADENA:token2 {:
					parser.check(token);

			:} | TK_CADENA operador TK_ID:token2 {:
					parser.check(token2);
			
			:} | expresion operador TK_DIG {:
			
			:} | expresion operador TK_INT_SIM:token {:
					parser.check(token);
			
			:} | expresion operador TK_INT_SUS:token {:
					parser.check(token);
			
			:} | expresion operador TK_ID:token {:
					parser.check(token);
			
			:} | expresion operador TK_CADENA {:
			
			:};


//Funciones predefinidas
abs::= TK_ABS TK_PAR_IZQ numerico TK_PAR_DER {:
	:};

tan::= TK_TAN TK_PAR_IZQ numerico TK_PAR_DER {:
	:};

sqr::= TK_SQR TK_PAR_IZQ TK_DIG:token TK_PAR_DER {:
			String aux = token.toString();
			if(aux.contains("-")) {
				System.out.println("El valor introducido tiene que ser mayor que 0");
				parser.err_semantico++;
			}
	:} | TK_SQR TK_PAR_IZQ TK_INT_SIM TK_PAR_DER 

	   | TK_SQR TK_INT_SUS;



log::= TK_LOG TK_PAR_IZQ TK_DIG:token TK_PAR_DER {:
			String aux = token.toString();
			if(aux.contains("-")) {
				System.out.println("El valor introducido tiene que ser mayor que 0");
				parser.err_semantico++;
			} else {
				int valor = Integer.parseInt(aux);
				if (valor <= 0) {
					System.out.println("El valor introducido no puede ser 0");
					parser.err_semantico++;
				}
			} 

	:} | TK_LOG TK_PAR_IZQ TK_INT_SIM TK_PAR_DER 

	   | TK_LOG TK_INT_SUS;

sin::= TK_SIN TK_PAR_IZQ numerico TK_PAR_DER {:
	:};

sgn::= TK_SGN TK_PAR_IZQ numerico TK_PAR_DER {:
	:};

rnd::= TK_RND TK_PAR_IZQ numerico TK_PAR_DER {:
		parser.isRnd = true;
   	:};

int::= TK_INT TK_PAR_IZQ numerico TK_PAR_DER{:
	:};

exp::= TK_EXP TK_PAR_IZQ numerico TK_PAR_DER {:
	:};

cos::= TK_COS TK_PAR_IZQ numerico TK_PAR_DER {:
	:};

atn::= TK_ATN TK_PAR_IZQ numerico TK_PAR_DER {:
	:};


//Operadores
comparacion::= TK_MENOR {:
			:} | TK_MAYOR {:
			:} | TK_MAYOR_IGUAL {:
			:} | TK_MENOR_IGUAL {:
			:} | TK_DISTINTO {:
			:} | TK_IGUAL {:
			:};

				
operador::= TK_SUMA {:
			:} | TK_RESTA {:
			:} | TK_MUL {:
			:} | TK_DIV {:
			:} | TK_EL {:
			:};

//Unidad minima de informacion, el dato y la constante.
dato::= TK_ID:dat {:
			parser.check(dat);
			
		:} | TK_INT_SIM:dat {:
			parser.check(dat);
			
		:} | TK_INT_SUS:dat {:
			parser.check(dat);
			
		:} | TK_DIG {:
		:};
